@model HospitalAssetTracker.Models.Asset
@{
    ViewData["Title"] = "Create Asset";
}

<style>
    /* Enhanced Professional Styling */
    .checklist .form-check {
        transition: all 0.3s ease;
        padding: 8px 12px;
        border-radius: 6px;
        margin-bottom: 8px !important;
        border: 1px solid transparent;
    }
    
    .checklist .form-check:hover {
        background-color: #f8f9fa;
        border-color: #e9ecef;
        transform: translateX(2px);
    }
    
    .checklist .form-check-input:checked ~ .form-check-label {
        text-decoration: line-through;
        opacity: 0.7;
        color: #28a745;
    }
    
    .checklist .form-check-input:checked {
        background-color: #28a745;
        border-color: #28a745;
    }
    
    /* Enhanced Smart Guidelines Styling */
    .minimal-checklist .checklist-item {
        transition: all 0.3s ease;
        border-radius: 8px;
        padding: 8px;
        margin-bottom: 8px;
        border: 1px solid #e9ecef;
        background: #fff;
    }
    
    .minimal-checklist .checklist-item:hover {
        background-color: rgba(13, 110, 253, 0.08);
        border-color: #0d6efd;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Add Location Button Styling */
    #addLocationBtn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
    
    #locationSelect {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
    
    /* Modal Enhancements */
    .modal-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 2px solid #dee2e6;
    }
    
    .modal-title {
        font-weight: 600;
    }
    
    .minimal-checklist .form-check-input {
        margin-top: 0.125rem;
        border-radius: 4px;
        border: 2px solid #dee2e6;
        transition: all 0.3s ease;
        width: 1.2em;
        height: 1.2em;
    }
    
    .minimal-checklist .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
    
    .minimal-checklist .form-check-input:checked ~ .form-check-label {
        color: #0d6efd !important;
        font-weight: 500;
    }
    
    .minimal-checklist .form-check-label {
        font-size: 0.9rem;
        line-height: 1.4;
        transition: all 0.2s ease;
        cursor: pointer;
    }
    
    /* Enhanced Progress Bar */
    .progress {
        transition: all 0.3s ease;
        border-radius: 10px;
        background-color: #f8f9fa;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .progress-bar {
        border-radius: 10px;
        transition: width 0.6s ease;
        position: relative;
        overflow: hidden;
    }
    
    .progress-bar-animated {
        background-size: 1rem 1rem;
    }
    
    /* Professional Card Styling */
    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        transition: box-shadow 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .card-header {
        border-radius: 12px 12px 0 0 !important;
        border-bottom: none;
        padding: 1rem 1.25rem;
    }
    
    /* Button Enhancements */
    .btn-outline-primary:hover, .btn-outline-success:hover, 
    .btn-outline-info:hover, .btn-outline-warning:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Smart Action Buttons */
    .btn-sm {
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    
    /* Accordion Enhancements */
    .accordion-button {
        font-size: 0.9rem;
        border: none;
        padding: 0.75rem 0;
        background: transparent;
        border-radius: 6px;
    }
    
    .accordion-button:not(.collapsed) {
        background-color: rgba(13, 110, 253, 0.08);
        color: #0d6efd;
        box-shadow: none;
    }
    
    .accordion-button:focus {
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        border: none;
    }
    
    /* Field Highlighting */
    .border-success {
        border-color: #28a745 !important;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    }
    
    .border-danger {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }
    
    /* Status Indicators */
    .badge {
        font-size: 0.75rem;
        padding: 0.35rem 0.6rem;
        border-radius: 6px;
        font-weight: 500;
    }
    
    /* Gradient Backgrounds */
    .bg-gradient {
        background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-purple) 100%) !important;
    }
    }
    
    .card-header.bg-info {
        background: linear-gradient(135deg, #0dcaf0 0%, #0aa2c0 100%) !important;
        border: none;
    }
    
    .btn-outline-primary:hover, .btn-outline-secondary:hover, 
    .btn-outline-success:hover, .btn-outline-info:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .toast-container {
        z-index: 9999;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .card {
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        border: none;
        transition: box-shadow 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    
    .bg-light.rounded {
        border-left: 4px solid #0d6efd;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
    }
    
    /* Timeline Styling */
    .timeline {
        position: relative;
        padding-left: 20px;
    }
    
    .timeline::before {
        content: '';
        position: absolute;
        left: 8px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: linear-gradient(to bottom, #0d6efd, #28a745);
    }
    
    .timeline-item {
        position: relative;
        margin-bottom: 12px;
        padding-left: 20px;
    }
    
    .timeline-marker {
        position: absolute;
        left: -16px;
        top: 2px;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    /* Enhanced Alert Styling */
    .alert {
        border: none;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .alert-warning {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
    }
    
    .alert-info {
        background: linear-gradient(135deg, #d1ecf1 0%, #b8daff 100%);
        color: #0c5460;
    }
    
    /* Enhanced Button Styling */
    .btn-sm {
        font-size: 0.8rem;
        padding: 6px 12px;
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    
    /* Card Header Enhancements */
    .card-header h6 {
        font-weight: 600;
        letter-spacing: 0.5px;
    }
    
    /* Table Styling */
    .table-borderless td {
        border: none;
        padding: 4px 8px 4px 0;
        vertical-align: top;
    }
    
    /* Collapse Toggle Animation */
    .collapse.show + * .bi-chevron-down,
    .collapse + * .bi-chevron-down {
        transition: transform 0.2s ease;
    }
    
    [aria-expanded="true"] .bi-chevron-down {
        transform: rotate(180deg);
    }
    
    /* Professional Form Styling */
    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 6px;
    }
    
    .form-control, .form-select {
        border-radius: 6px;
        border: 1px solid #ced4da;
        transition: all 0.2s ease;
    }
    
    .form-control:hover, .form-select:hover {
        border-color: #86b7fe;
    }
    
    /* Required field indicator */
    .text-danger {
        font-weight: 600;
    }
    
    /* Shadow and depth enhancements */
    .shadow-sm {
        box-shadow: 0 2px 4px rgba(0,0,0,0.08) !important;
    }
    
    /* Responsive enhancements */
    @@media (max-width: 768px) {
        .timeline {
            padding-left: 15px;
        }
        
        .timeline-item {
            padding-left: 15px;
        }
        
        .timeline-marker {
            left: -12px;
            width: 10px;
            height: 10px;
        }
        
        .card-body {
            padding: 1rem;
        }
    }
</style>

<h1>Add New Asset</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["WarningMessage"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["WarningMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="row">
    <div class="col-md-8">
        <form asp-action="Create" class="needs-validation" novalidate>
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
            
            <div class="card">
                <div class="card-header" id="basicInfo">
                    <h5><i class="bi bi-info-circle"></i> Basic Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="AssetTag" class="form-label">Asset Tag *</label>
                                <div class="input-group">
                                    <input asp-for="AssetTag" class="form-control" placeholder="e.g., DESK-1234567" required />
                                    <button type="button" class="btn btn-outline-secondary" onclick="generateAssetTag()" title="Auto Generate Asset Tag">
                                        <i class="bi bi-arrow-clockwise"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="AssetTag" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Category" class="form-label">Category *</label>
                                <select asp-for="Category" class="form-select" asp-items="@ViewBag.Categories" required>
                                    <option value="">Select Category</option>
                                </select>
                                <span asp-validation-for="Category" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Brand" class="form-label">Brand *</label>
                                <input asp-for="Brand" class="form-control" placeholder="e.g., Dell, HP, Canon" required />
                                <span asp-validation-for="Brand" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Model" class="form-label">Model *</label>
                                <input asp-for="Model" class="form-control" placeholder="e.g., OptiPlex 7090" required />
                                <span asp-validation-for="Model" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="SerialNumber" class="form-label">Serial Number</label>
                                <input asp-for="SerialNumber" class="form-control" placeholder="Serial number" />
                                <span asp-validation-for="SerialNumber" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Status" class="form-label">Status *</label>
                                <select asp-for="Status" class="form-select" asp-items="@ViewBag.Statuses" required>
                                    <option value="">Select Status</option>
                                </select>
                                <span asp-validation-for="Status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Brief description of the asset"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5><i class="bi bi-geo-alt"></i> Location & Assignment</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="LocationId" class="form-label">Location</label>
                                <div class="input-group">
                                    <select asp-for="LocationId" id="locationSelect" class="form-select" asp-items="@ViewBag.Locations">
                                        <option value="">Select Location</option>
                                    </select>
                                    <button type="button" class="btn btn-outline-primary" id="addLocationBtn" title="Add New Location">
                                        <i class="bi bi-plus-circle"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="LocationId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="AssignedToUserId" class="form-label">Assigned To</label>
                                <select asp-for="AssignedToUserId" class="form-select" asp-items="@ViewBag.Users">
                                    <option value="">Unassigned</option>
                                </select>
                                <span asp-validation-for="AssignedToUserId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="ResponsiblePerson" class="form-label">Responsible Person</label>
                                <input asp-for="ResponsiblePerson" class="form-control" placeholder="Person responsible for this asset" />
                                <span asp-validation-for="ResponsiblePerson" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Department" class="form-label">Department</label>
                                <input asp-for="Department" class="form-control" placeholder="e.g., ICU, Emergency, Administration" />
                                <span asp-validation-for="Department" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5><i class="bi bi-calendar"></i> Dates & Warranty</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="InstallationDate" class="form-label">Installation Date</label>
                                <input asp-for="InstallationDate" class="form-control" type="date" />
                                <span asp-validation-for="InstallationDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="WarrantyExpiry" class="form-label">Warranty Expiry</label>
                                <input asp-for="WarrantyExpiry" class="form-control" type="date" />
                                <span asp-validation-for="WarrantyExpiry" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Supplier" class="form-label">Supplier</label>
                                <input asp-for="Supplier" class="form-control" placeholder="Supplier/Vendor name" />
                                <span asp-validation-for="Supplier" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="PurchasePrice" class="form-label">Purchase Price</label>
                                <input asp-for="PurchasePrice" class="form-control" type="number" step="0.01" placeholder="0.00" />
                                <span asp-validation-for="PurchasePrice" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5><i class="bi bi-chat-text"></i> Additional Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Notes" class="form-label">Notes</label>
                        <textarea asp-for="Notes" class="form-control" rows="4" placeholder="Additional notes, configurations, or special requirements"></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="bi bi-plus-circle"></i> Create Asset
                </button>
                <a asp-action="Index" class="btn btn-secondary btn-lg ms-2">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </form>
    </div>
    
    <div class="col-md-4">
        <!-- Professional Asset Management Guidelines -->
        <div class="card shadow-sm sticky-top" style="top: 20px;">
            <div class="card-header bg-primary text-white">
                <h6 class="mb-0">
                    <i class="bi bi-book me-2"></i>Asset Management Guidelines
                </h6>
            </div>
            <div class="card-body">
                <h6 class="text-primary"><i class="bi bi-check-circle"></i> Best Practices</h6>
                <ul class="list-unstyled small">
                    <li class="mb-2"><i class="bi bi-check text-success"></i> Verify asset doesn't already exist in system</li>
                    <li class="mb-2"><i class="bi bi-check text-success"></i> Use standardized naming conventions</li>
                    <li class="mb-2"><i class="bi bi-check text-success"></i> Complete all required fields accurately</li>
                    <li class="mb-2"><i class="bi bi-check text-success"></i> Attach relevant documentation if available</li>
                </ul>
                
                <hr>
                
                <h6 class="text-primary"><i class="bi bi-tag"></i> Asset Tag Format</h6>
                <div class="small">
                    <div class="mb-2">
                        <span class="badge bg-info">COMP-1234567</span>
                        <div class="text-muted">Computer equipment</div>
                    </div>
                    <div class="mb-2">
                        <span class="badge bg-warning">MED-9876543</span>
                        <div class="text-muted">Medical devices</div>
                    </div>
                    <div class="mb-2">
                        <span class="badge bg-success">FURN-5432187</span>
                        <div class="text-muted">Furniture items</div>
                    </div>
                    <div class="mb-2">
                        <span class="badge bg-secondary">NET-8765421</span>
                        <div class="text-muted">Network equipment</div>
                    </div>
                </div>
                
                <hr>
                
                <h6 class="text-primary"><i class="bi bi-gear"></i> Asset Status Guide</h6>
                <ul class="list-unstyled small">
                    <li class="mb-1"><span class="badge bg-success">Active</span> - In use and functional</li>
                    <li class="mb-1"><span class="badge bg-warning">Maintenance</span> - Under repair/service</li>
                    <li class="mb-1"><span class="badge bg-info">Available</span> - Ready for assignment</li>
                    <li class="mb-1"><span class="badge bg-secondary">Retired</span> - End of lifecycle</li>
                </ul>
                
                <hr>
                
                <h6 class="text-primary"><i class="bi bi-shield-check"></i> Compliance Requirements</h6>
                <ul class="list-unstyled small">
                    <li class="mb-1">• Maintain accurate warranty information</li>
                    <li class="mb-1">• Record all maintenance activities</li>
                    <li class="mb-1">• Document asset location changes</li>
                    <li class="mb-1">• Follow hospital regulatory standards</li>
                </ul>
                
                <hr>
                
                <h6 class="text-primary"><i class="bi bi-clock"></i> Required Actions</h6>
                <ul class="list-unstyled small">
                    <li class="mb-1"><strong>Immediate:</strong> Asset tag assignment</li>
                    <li class="mb-1"><strong>Within 24h:</strong> Location verification</li>
                    <li class="mb-1"><strong>Within 48h:</strong> Warranty registration</li>
                    <li class="mb-1"><strong>Ongoing:</strong> Status monitoring</li>
                </ul>
                
                <hr>
                
                <div class="alert alert-info alert-sm">
                    <i class="bi bi-info-circle"></i>
                    <strong>Note:</strong> All assets must comply with hospital safety and regulatory standards.
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add New Location Modal -->
<div class="modal fade" id="addLocationModal" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addLocationModalLabel">
                    <i class="bi bi-geo-alt-fill text-primary"></i> Add New Location
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addLocationForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newLocationName" class="form-label">Location Name *</label>
                                <input type="text" class="form-control" id="newLocationName" required 
                                       placeholder="e.g., Server Room A1, Emergency Ward">
                                <div class="form-text">
                                    Enter a descriptive name for the location.
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newLocationBuilding" class="form-label">Building</label>
                                <input type="text" class="form-control" id="newLocationBuilding" 
                                       placeholder="e.g., Main Building, Tower A">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newLocationFloor" class="form-label">Floor</label>
                                <input type="text" class="form-control" id="newLocationFloor" 
                                       placeholder="e.g., Ground Floor, 2nd Floor">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newLocationRoom" class="form-label">Room</label>
                                <input type="text" class="form-control" id="newLocationRoom" 
                                       placeholder="e.g., Room 201, Suite A">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="newLocationDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="newLocationDescription" rows="3" 
                                placeholder="Brief description of this location (optional)"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveLocationBtn">
                    <i class="bi bi-check-circle"></i> Add Location
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Wait for DOM content to load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Asset Create page loaded');
    
    // Initialize form validation
    const forms = document.querySelectorAll('.needs-validation');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!form.checkValidity()) {
                e.preventDefault();
                e.stopPropagation();
            }
            form.classList.add('was-validated');
        });
    });
    
    // Add required field indicators using vanilla JS
    const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
    requiredFields.forEach(field => {
        const label = document.querySelector(`label[for="${field.id}"]`);
        if (label && !label.querySelector('.text-danger')) {
            label.innerHTML += ' <span class="text-danger">*</span>';
        }
    });
    
    // Category change handler
    const categorySelect = document.querySelector('select[name="Category"]');
    if (categorySelect) {
        categorySelect.addEventListener('change', function() {
            const category = this.value;
            const suggestions = getCategorySuggestions(category);
            
            if (suggestions.supplier) {
                const supplierField = document.querySelector('[name="Supplier"]');
                if (supplierField) {
                    supplierField.placeholder = `e.g., ${suggestions.supplier}`;
                }
            }
            if (suggestions.model) {
                const modelField = document.querySelector('[name="Model"]');
                if (modelField) {
                    modelField.placeholder = `e.g., ${suggestions.model}`;
                }
            }
            
            // Auto-generate Asset Tag if field is empty
            const assetTagInput = document.querySelector('[name="AssetTag"]');
            if (assetTagInput && !assetTagInput.value && category) {
                generateAssetTag();
            }
        });
    }
    
    // Asset Tag validation
    const assetTagField = document.querySelector('[name="AssetTag"]');
    if (assetTagField) {
        assetTagField.addEventListener('blur', function() {
            validateAssetTag();
        });
    }
    
    // Purchase price validation
    const priceField = document.querySelector('[name="PurchasePrice"]');
    if (priceField) {
        priceField.addEventListener('input', function() {
            const value = parseFloat(this.value);
            if (value < 0) {
                this.classList.add('is-invalid');
                showToast('Purchase price cannot be negative', 'error');
            } else {
                this.classList.remove('is-invalid');
            }
        });
    }
    
    console.log('Asset Create page initialization complete');
});

// Get category-specific suggestions
function getCategorySuggestions(categoryValue) {
    const suggestions = {
        '0': { supplier: 'Dell, HP, Lenovo', model: 'OptiPlex 7090, EliteDesk 800' }, // Desktop
        '1': { supplier: 'Dell, HP, Lenovo', model: 'Latitude 7420, ThinkPad X1' }, // Laptop
        '2': { supplier: 'HP, Canon, Epson', model: 'LaserJet Pro, PIXMA' }, // Printer
        '3': { supplier: 'Canon, Epson, Fujitsu', model: 'ScanSnap, WorkForce' }, // Scanner
        '4': { supplier: 'Dell, HP, LG', model: 'UltraSharp U2722DE' }, // Monitor
        '5': { supplier: 'Logitech, Dell, HP', model: 'K380, Wireless Keyboard' }, // Keyboard
        '6': { supplier: 'Logitech, Dell, HP', model: 'MX Master 3, Wireless Mouse' }, // Mouse
        '7': { supplier: 'Logitech, JBL, Dell', model: 'Z313, Multimedia Speakers' }, // Speaker
        '8': { supplier: 'Samsung, LG, Sony', model: 'Smart TV, LED Display' }, // Television
        '9': { supplier: 'Cisco, Netgear, HP', model: 'Catalyst 2960, ProCurve' }, // NetworkDevice
        '10': { supplier: 'Dell, HP, IBM', model: 'PowerEdge R740, ProLiant' }, // Server
        '11': { supplier: 'GE, Philips, Siemens', model: 'Various medical devices' }, // MedicalDevice
        '12': { supplier: 'Various', model: 'Miscellaneous equipment' } // Other
    };
    
    return suggestions[categoryValue] || { supplier: '', model: '' };
}

// Progress tracking for guidelines checklist
function updateProgress() {
    const checkboxes = document.querySelectorAll('.checklist input[type="checkbox"]');
    const checkedCount = document.querySelectorAll('.checklist input[type="checkbox"]:checked').length;
    const totalCount = checkboxes.length;
    const percentage = Math.round((checkedCount / totalCount) * 100);
    
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    
    if (progressBar && progressText) {
        progressBar.style.width = percentage + '%';
        progressText.textContent = percentage + '%';
        
        // Change color and animation based on progress
        progressBar.className = 'progress-bar progress-bar-striped';
        if (percentage === 100) {
            progressBar.classList.add('bg-success');
        } else if (percentage >= 75) {
            progressBar.classList.add('bg-info');
        } else if (percentage >= 50) {
            progressBar.classList.add('bg-warning');
        } else {
            progressBar.classList.add('bg-danger');
        }
        
        // Add animation for completed state
        if (percentage === 100) {
            progressBar.classList.add('progress-bar-animated');
            setTimeout(() => {
                showToast('All guidelines completed! Ready to create asset.', 'success');
            }, 500);
        }
    }
    
    // Update form status
    updateFormStatus();
}

// Minimalist progress tracking for new guidelines section
function updateMinimalProgress() {
    const checkboxes = document.querySelectorAll('.minimal-checklist input[type="checkbox"]');
    const checkedCount = document.querySelectorAll('.minimal-checklist input[type="checkbox"]:checked').length;
    const totalCount = checkboxes.length;
    const percentage = Math.round((checkedCount / totalCount) * 100);
    
    // Update progress bar
    const progressBar = document.getElementById('minimalProgressBar');
    if (progressBar) {
        progressBar.style.width = percentage + '%';
    }
    
    // Update completion badge
    const completionBadge = document.getElementById('completionBadge');
    if (completionBadge) {
        completionBadge.textContent = `${checkedCount}/${totalCount}`;
        completionBadge.className = percentage === 100 ? 'badge bg-success text-white' : 'badge bg-light text-dark border';
    }
    
    // Show completion notification
    if (percentage === 100) {
        setTimeout(() => {
            showToast('Guidelines checklist completed! 🎉', 'success');
        }, 300);
    }
}

// Update form status indicator
function updateFormStatus() {
    const formStatus = document.getElementById('formStatus');
    if (!formStatus) return;
    
    const requiredFields = document.querySelectorAll('[required]');
    const filledFields = Array.from(requiredFields).filter(field => field.value.trim() !== '');
    const completionRate = Math.round((filledFields.length / requiredFields.length) * 100);
    
    if (completionRate === 100) {
        formStatus.textContent = 'Form complete - Ready to submit';
        formStatus.className = 'text-success fw-bold';
    } else if (completionRate >= 50) {
        formStatus.textContent = `Form ${completionRate}% complete`;
        formStatus.className = 'text-warning';
    } else {
        formStatus.textContent = 'Ready for input';
        formStatus.className = 'text-muted';
    }
}

// Enhanced Smart Progress Functions
function updateSmartProgress() {
    const checkboxes = document.querySelectorAll('.minimal-checklist input[type="checkbox"]');
    const checkedCount = document.querySelectorAll('.minimal-checklist input[type="checkbox"]:checked').length;
    const totalCount = checkboxes.length;
    const percentage = Math.round((checkedCount / totalCount) * 100);
    
    // Update progress bar with animation
    const progressBar = document.getElementById('smartProgressBar');
    if (progressBar) {
        progressBar.style.width = percentage + '%';
        progressBar.setAttribute('aria-valuenow', percentage);
    }
    
    // Update completion badge
    const completionBadge = document.getElementById('completionBadge');
    if (completionBadge) {
        completionBadge.textContent = `${checkedCount}/${totalCount}`;
        completionBadge.className = percentage === 100 ? 'badge bg-success text-white' : 'badge bg-primary text-white';
    }
    
    // Update progress text
    const progressText = document.getElementById('progressText');
    if (progressText) {
        progressText.textContent = `${percentage}% Complete`;
        if (percentage === 100) {
            progressText.className = 'text-success fw-bold';
        }
    }
    
    // Update completion score
    const completionScore = document.getElementById('completionScore');
    if (completionScore) {
        completionScore.textContent = percentage + '%';
    }
    
    // Update contextual suggestions
    updateSmartSuggestions();
    
    // Achievement notification
    if (percentage === 100 && checkedCount === totalCount) {
        setTimeout(() => {
            showToast('🎉 All sections completed! Your asset is ready for creation.', 'success');
        }, 500);
    }
}

// Focus on specific form section
function focusSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth', block: 'start' });
        section.style.backgroundColor = '#fff3cd';
        setTimeout(() => {
            section.style.backgroundColor = '';
        }, 2000);
    }
}

// Auto-validate fields based on data attributes
function autoValidateFields() {
    const checklistItems = document.querySelectorAll('.checklist-item[data-fields]');
    let validatedCount = 0;
    
    checklistItems.forEach((item, index) => {
        const fields = item.getAttribute('data-fields').split(',');
        const checkbox = item.querySelector('input[type="checkbox"]');
        let sectionComplete = false;
        
        // Check if at least one field in the section has a value
        const hasRequiredData = fields.some(fieldName => {
            const field = document.querySelector(`[name="${fieldName}"]`);
            return field && field.value && field.value.trim() !== '';
        });
        
        setTimeout(() => {
            if (hasRequiredData) {
                checkbox.checked = true;
                item.style.backgroundColor = '#d1edff';
                validatedCount++;
            } else {
                checkbox.checked = false;
                item.style.backgroundColor = '#fff2cc';
            }
            
            setTimeout(() => {
                item.style.backgroundColor = '';
            }, 1000);
        }, index * 200);
    });
    
    setTimeout(() => {
        updateSmartProgress();
        showToast(`Auto-validation complete! ${validatedCount} sections validated.`, 'info');
    }, checklistItems.length * 200 + 500);
}

// Show missing fields with visual indicators
function showMissingFields() {
    const checklistItems = document.querySelectorAll('.checklist-item[data-fields]');
    const missingFields = [];
    
    checklistItems.forEach(item => {
        const fields = item.getAttribute('data-fields').split(',');
        const checkbox = item.querySelector('input[type="checkbox"]');
        
        if (!checkbox.checked) {
            const emptyFields = fields.filter(fieldName => {
                const field = document.querySelector(`[name="${fieldName}"]`);
                return !field || !field.value || field.value.trim() === '';
            });
            
            if (emptyFields.length > 0) {
                missingFields.push({
                    section: item.querySelector('label strong').textContent,
                    fields: emptyFields
                });
                
                // Highlight missing section
                item.style.border = '2px solid #dc3545';
                setTimeout(() => {
                    item.style.border = '';
                }, 3000);
            }
        }
    });
    
    if (missingFields.length > 0) {
        let message = 'Missing information in:\n';
        missingFields.forEach(section => {
            message += `• ${section.section}\n`;
        });
        alert(message);
    } else {
        showToast('All required sections are complete! 🎉', 'success');
    }
}

// Smart contextual help
function showContextualHelp() {
    const activeElement = document.activeElement;
    let helpText = 'General Help: Fill out all required fields marked with *';
    
    if (activeElement && activeElement.name) {
        const fieldHelp = {
            'AssetTag': 'Asset Tag: Use format CATEGORY-NUMBER (e.g., DESK-001). Must be unique.',
            'Category': 'Category: Select the appropriate asset type. This affects depreciation and maintenance schedules.',
            'Brand': 'Brand: Enter the exact manufacturer name as shown on the device.',
            'Model': 'Model: Use the specific model number from the manufacturer specifications.',
            'SerialNumber': 'Serial Number: Found on device labels or in system information. Used for warranty claims.',
            'PurchasePrice': 'Purchase Price: Original cost excluding taxes. Used for depreciation calculations.',
            'WarrantyExpiry': 'Warranty Expiry: Important for maintenance planning and automatic alerts.',
            'LocationId': 'Location: Select the most specific location where the asset is deployed.',
            'Department': 'Department: Responsible organizational unit for budgeting and management.'
        };
        
        helpText = fieldHelp[activeElement.name] || helpText;
    }
    
    // Show help modal or tooltip
    showHelpModal('Contextual Help', helpText);
}

// Contact support function
function contactSupport() {
    const supportInfo = `
        <div class="text-center">
            <i class="bi bi-headset fs-1 text-primary mb-3"></i>
            <h5>IT Asset Management Support</h5>
            <div class="row mt-4">
                <div class="col-6">
                    <div class="border rounded p-3">
                        <i class="bi bi-telephone-fill text-success"></i>
                        <div><strong>Phone</strong></div>
                        <div>ext. 2435</div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="border rounded p-3">
                        <i class="bi bi-envelope-fill text-info"></i>
                        <div><strong>Email</strong></div>
                        <div>assets@hospital.com</div>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <small class="text-muted">Support available Mon-Fri, 8:00 AM - 6:00 PM</small>
            </div>
        </div>
    `;
    showHelpModal('Contact Support', supportInfo);
}

// Automatic Asset Tag Generation
function generateAssetTag() {
    const categorySelect = document.querySelector('select[name="Category"]') || document.getElementById('Category');
    const assetTagInput = document.querySelector('input[name="AssetTag"]') || document.getElementById('AssetTag');
    
    if (!categorySelect || !assetTagInput) {
        console.error('Elements not found - categorySelect:', categorySelect, 'assetTagInput:', assetTagInput);
        showToast('Error: Form elements not found', 'error');
        return;
    }
    
    if (!categorySelect.value) {
        showToast('Please select a category first to generate Asset Tag', 'warning');
        categorySelect.focus();
        return;
    }
    
    // Category-based prefixes (matching AssetCategory enum)
    const categoryPrefixes = {
        '0': 'DESK',   // Desktop
        '1': 'LAP',    // Laptop  
        '2': 'PRNT',   // Printer
        '3': 'SCAN',   // Scanner
        '4': 'MON',    // Monitor
        '5': 'KEYB',   // Keyboard
        '6': 'MOUS',   // Mouse
        '7': 'SPKR',   // Speaker
        '8': 'TV',     // Television
        '9': 'NET',    // NetworkDevice
        '10': 'SRV',   // Server
        '11': 'MED',   // MedicalDevice
        '12': 'OTH'    // Other
    };
    
    const prefix = categoryPrefixes[categorySelect.value] || 'ASSET';
    
    // Generate unique 7-digit number
    const sevenDigitNum = Math.floor(1000000 + Math.random() * 9000000).toString(); // Random 7-digit number (1000000-9999999)
    
    const generatedTag = `${prefix}-${sevenDigitNum}`;
    
    // Set the generated tag
    assetTagInput.value = generatedTag;
    
    // Add visual feedback
    assetTagInput.style.backgroundColor = '#d4edda';
    assetTagInput.style.borderColor = '#28a745';
    
    // Remove visual feedback after 2 seconds
    setTimeout(() => {
        assetTagInput.style.backgroundColor = '';
        assetTagInput.style.borderColor = '';
    }, 2000);
    
    showToast(`Asset Tag generated: ${generatedTag}`, 'success');
    
    // Trigger validation
    validateAssetTag();
}

// Validate Asset Tag format
function validateAssetTag() {
    const assetTagInput = document.querySelector('[name="AssetTag"]');
    const assetTag = assetTagInput.value.trim();
    
    if (!assetTag) {
        return true; // Empty is okay, required validation will handle
    }
    
    // Check format: 2-4 uppercase letters, dash, 7 digits
    const tagPattern = /^[A-Z]{2,6}-\d{7}$/;
    
    if (tagPattern.test(assetTag)) {
        assetTagInput.classList.remove('is-invalid');
        assetTagInput.classList.add('is-valid');
        
        // Remove any existing error message
        const errorSpan = assetTagInput.parentElement.parentElement.querySelector('.invalid-feedback');
        if (errorSpan) {
            errorSpan.remove();
        }
        
        return true;
    } else {
        assetTagInput.classList.remove('is-valid');
        assetTagInput.classList.add('is-invalid');
        
        // Add error message
        let errorSpan = assetTagInput.parentElement.parentElement.querySelector('.invalid-feedback');
        if (!errorSpan) {
            errorSpan = document.createElement('div');
            errorSpan.className = 'invalid-feedback';
            assetTagInput.parentElement.insertAdjacentElement('afterend', errorSpan);
        }
        errorSpan.textContent = 'Asset Tag must follow format: PREFIX-0000000 (e.g., DESK-1234567)';
        
        return false;
    }
}

// Toast notification function
function showToast(message, type = 'info') {
    const toastHtml = `
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : type === 'error' ? 'danger' : 'info'} border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `;
    
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        document.body.appendChild(toastContainer);
    }
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    const toastElement = toastContainer.lastElementChild;
    
    if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {
        const toast = new bootstrap.Toast(toastElement);
        toast.show();
    } else {
        console.error('Bootstrap Toast not available');
        // Fallback: show as alert
        alert(message);
    }
    
    // Auto remove after hiding
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}

// Add Location functionality
document.addEventListener('DOMContentLoaded', function() {
    // Add Location functionality
    const addLocationBtn = document.getElementById('addLocationBtn');
    const addLocationModal = new bootstrap.Modal(document.getElementById('addLocationModal'));
    const saveLocationBtn = document.getElementById('saveLocationBtn');
    const locationSelect = document.getElementById('locationSelect');
    const newLocationNameInput = document.getElementById('newLocationName');
    
    // Open location modal when add button is clicked
    addLocationBtn.addEventListener('click', function() {
        addLocationModal.show();
        setTimeout(() => {
            newLocationNameInput.focus();
        }, 500);
    });
    
    // Save new location with AJAX
    saveLocationBtn.addEventListener('click', function() {
        const locationName = newLocationNameInput.value.trim();
        const locationDescription = document.getElementById('newLocationDescription').value.trim();
        const locationBuilding = document.getElementById('newLocationBuilding').value.trim();
        const locationFloor = document.getElementById('newLocationFloor').value.trim();
        const locationRoom = document.getElementById('newLocationRoom').value.trim();
        
        if (!locationName) {
            showToast('Please enter a location name.', 'warning');
            newLocationNameInput.focus();
            return;
        }
        
        // Send AJAX request to save location
        fetch('/Assets/AddLocation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                name: locationName,
                description: locationDescription,
                building: locationBuilding,
                floor: locationFloor,
                room: locationRoom
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Add new option to select
                const newOption = document.createElement('option');
                newOption.value = data.location.value;
                newOption.textContent = data.location.text;
                newOption.selected = true;
                
                locationSelect.appendChild(newOption);
                
                // Close modal and reset form
                addLocationModal.hide();
                document.getElementById('addLocationForm').reset();
                
                showToast(data.message, 'success');
            } else {
                showToast(data.message, 'warning');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('An error occurred while adding the location.', 'error');
        });
    });
    
    // Allow Enter key to save in modals
    newCategoryNameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            saveCategoryBtn.click();
        }
    });
    
    newLocationNameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            saveLocationBtn.click();
        }
    });
});
</script>
