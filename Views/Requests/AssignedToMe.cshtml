@model IEnumerable<ITRequest>

@{
    ViewData["Title"] = "Requests Assigned to Me";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>@ViewData["Title"]</h2>
</div>

@if (!Model.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        No requests are currently assigned to you.
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="assignedRequestsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Requested By</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Due Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in Model)
                        {
                            <tr>
                                <td>@request.Id</td>
                                <td>
                                    <span class="badge bg-secondary">
                                        @request.RequestType.ToString().Replace("_", " ")
                                    </span>
                                </td>
                                <td>@request.Title</td>
                                <td>
                                    @if (request.RequestedByUser != null)
                                    {
                                        @request.RequestedByUser.FirstName @request.RequestedByUser.LastName
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unknown</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var priorityClass = request.Priority switch
                                        {
                                            RequestPriority.High => "bg-danger",
                                            RequestPriority.Medium => "bg-warning text-dark",
                                            RequestPriority.Low => "bg-success",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @priorityClass">@request.Priority</span>
                                </td>
                                <td>
                                    @{
                                        var statusClass = request.Status switch
                                        {
                                            RequestStatus.Open => "bg-primary",
                                            RequestStatus.InProgress => "bg-info",
                                            RequestStatus.PendingApproval => "bg-warning text-dark",
                                            RequestStatus.Approved => "bg-success",
                                            RequestStatus.Completed => "bg-success",
                                            RequestStatus.Cancelled => "bg-danger",
                                            RequestStatus.Rejected => "bg-danger",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusClass">
                                        @request.Status.ToString().Replace("_", " ")
                                    </span>
                                </td>
                                <td>@request.CreatedDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    @if (request.DueDate.HasValue)
                                    {
                                        var isOverdue = request.DueDate.Value < DateTime.Now && request.Status != RequestStatus.Completed;
                                        <span class="@(isOverdue ? "text-danger fw-bold" : "")">
                                            @request.DueDate.Value.ToString("MM/dd/yyyy")
                                        </span>
                                        @if (isOverdue)
                                        {
                                            <i class="fas fa-exclamation-triangle text-danger ms-1" title="Overdue"></i>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not set</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@request.Id" 
                                           class="btn btn-sm btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (request.Status == RequestStatus.Open || request.Status == RequestStatus.InProgress)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-success" 
                                                    onclick="completeRequest(@request.Id)" title="Mark Complete">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#assignedRequestsTable').DataTable({
                responsive: true,
                order: [[6, 'desc']],
                pageLength: 25,
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
        });

        function completeRequest(requestId) {
            Swal.fire({
                title: 'Complete Request',
                input: 'textarea',
                inputLabel: 'Completion Notes (optional)',
                inputPlaceholder: 'Enter any completion notes...',
                showCancelButton: true,
                confirmButtonText: 'Mark Complete',
                confirmButtonColor: '#28a745',
                cancelButtonText: 'Cancel',
                preConfirm: (notes) => {
                    return $.ajax({
                        url: '@Url.Action("Complete", "Requests")',
                        type: 'POST',
                        data: {
                            id: requestId,
                            completionNotes: notes,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire(
                        'Completed!',
                        'The request has been marked as complete.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                }
            }).catch((error) => {
                Swal.fire(
                    'Error!',
                    'Failed to complete request: ' + (error.responseText || 'Unknown error'),
                    'error'
                );
            });
        }
    </script>
}
