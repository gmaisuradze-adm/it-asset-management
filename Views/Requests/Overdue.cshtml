@model List<ITRequest>
@inject UserManager<ApplicationUser> UserManager // Added UserManager injection
@{
    ViewData["Title"] = "Overdue Requests";
    var currentUserIdOverdue = UserManager.GetUserId(User); // Get current user ID
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-exclamation-triangle text-warning"></i> Overdue Requests</h2>
    <div>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-list"></i> All Requests
        </a>
    </div>
</div>

@if (Model?.Any() == true)
{
    <div class="alert alert-warning" role="alert">
        <i class="bi bi-exclamation-triangle"></i>
        <strong>Warning!</strong> There are @Model.Count overdue requests that require immediate attention.
    </div>

    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Overdue IT Requests</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Request #</th>
                            <th>Title</th>
                            <th>Requester</th>
                            <th>Department</th>
                            <th>Priority</th>
                            <th>Required By</th>
                            <th>Days Overdue</th>
                            <th>Status</th>
                            <th>Assigned To</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in Model.OrderBy(r => r.RequiredByDate))
                        {
                            var daysOverdue = request.RequiredByDate.HasValue ? 
                                (DateTime.UtcNow - request.RequiredByDate.Value).Days : 0;
                            var priorityBadge = request.Priority switch
                            {
                                RequestPriority.Critical => "bg-danger",
                                RequestPriority.High => "bg-warning text-dark",
                                RequestPriority.Medium => "bg-info",
                                RequestPriority.Low => "bg-success",
                                _ => "bg-secondary"
                            };
                            var statusBadge = request.Status switch
                            {
                                RequestStatus.Submitted => "bg-primary", // Standardized
                                RequestStatus.InProgress => "bg-warning text-dark", // Standardized
                                RequestStatus.OnHold => "bg-secondary", // Standardized
                                RequestStatus.Completed => "bg-success", // Standardized (though unlikely for overdue)
                                RequestStatus.Cancelled => "bg-danger", // Standardized (though unlikely for overdue)
                                _ => "bg-light text-dark"
                            };
                            
                            <tr class="@(daysOverdue > 7 ? "table-danger" : daysOverdue > 3 ? "table-warning" : "")">
                                <td>
                                    <a asp-action="Details" asp-route-id="@request.Id" class="text-decoration-none">
                                        @request.RequestNumber
                                    </a>
                                </td>
                                <td>
                                    <div class="fw-medium">@request.Title</div>
                                    <small class="text-muted">@request.RequestType.ToString().Replace("_", " ")</small>
                                </td>
                                <td>
                                    @if (request.RequestedByUser != null)
                                    {
                                        <div>@request.RequestedByUser.FirstName @request.RequestedByUser.LastName</div>
                                        <small class="text-muted">@request.RequestedByUser.Email</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unknown</span>
                                    }
                                </td>
                                <td>@request.Department</td>
                                <td>
                                    <span class="badge @priorityBadge">@request.Priority</span>
                                </td>
                                <td>
                                    @if (request.RequiredByDate.HasValue)
                                    {
                                        <div>@request.RequiredByDate.Value.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@request.RequiredByDate.Value.ToString("HH:mm")</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-danger">
                                        @daysOverdue day@(daysOverdue != 1 ? "s" : "")
                                    </span>
                                </td>
                                <td>
                                    <span class="badge @statusBadge">@request.Status.ToString().Replace("_", " ")</span>
                                </td>
                                <td>
                                    @if (request.AssignedToUser != null)
                                    {
                                        <div>@request.AssignedToUser.FirstName @request.AssignedToUser.LastName</div>
                                        <small class="text-muted">@request.AssignedToUser.Email</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted text-decoration-underline">Unassigned</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a asp-action="Details" asp-route-id="@request.Id" 
                                           class="btn btn-outline-primary" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        @if (User.IsInRole("Admin") || User.IsInRole("IT Support"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@request.Id" 
                                               class="btn btn-outline-warning" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                        }
                                        
                                        @{ // Un-commented and activated the logic for action buttons
                                            var canAssignOverdue = User.IsInRole("Admin") || User.IsInRole("IT Support") || User.IsInRole("Asset Manager");
                                            var canCompleteOverdue = User.IsInRole("Admin") || User.IsInRole("IT Support");
                                            var isAssignedToCurrentUserOverdue = request.AssignedToUserId == currentUserIdOverdue;
                                        }

                                        @if (request.Status == RequestStatus.Submitted && canAssignOverdue && request.AssignedToUserId == null)
                                        {
                                            <button type="button" class="btn btn-success take-ownership-overdue" data-request-id="@request.Id" title="Take Ownership">
                                                <i class="bi bi-person-check-fill"></i>
                                            </button>
                                        }

                                        @if ((request.Status == RequestStatus.Submitted || request.Status == RequestStatus.InProgress) && canAssignOverdue)
                                        {
                                            <button type="button" class="btn btn-primary assign-request-overdue" data-bs-toggle="modal" data-bs-target="#assignRequestModalOverdue" data-request-id="@request.Id" title="@(request.AssignedToUserId == null ? "Assign" : "Re-assign")">
                                                <i class="bi bi-person-plus-fill"></i>
                                            </button>
                                        }

                                        @if (request.Status == RequestStatus.InProgress && canCompleteOverdue && isAssignedToCurrentUserOverdue)
                                        {
                                            <button type="button" class="btn btn-success complete-request-overdue" data-request-id="@request.Id" title="Mark as Complete">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
            <h4 class="mt-3">No Overdue Requests</h4>
            <p class="text-muted">All requests are on track! Great job keeping up with the schedule.</p>
            <a asp-action="Index" class="btn btn-primary">
                <i class="bi bi-list"></i> View All Requests
            </a>
        </div>
    </div>
}

@section Styles {
    <style>
        .table-danger {
            background-color: rgba(220, 53, 69, 0.1) !important;
        }
        .table-warning {
            background-color: rgba(255, 193, 7, 0.1) !important;
        }
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .btn-group-sm .btn {
            font-size: 0.75rem;
        }
        .text-decoration-underline {
            text-decoration: underline !important;
        }
    </style>
}

<!-- Assign Request Modal -->
<div class="modal fade" id="assignRequestModalOverdue" tabindex="-1" aria-labelledby="assignRequestModalOverdueLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assignRequestModalOverdueLabel">Assign Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="assignRequestOverdueForm">
                <div class="modal-body">
                    <input type="hidden" id="assignOverdueRequestId" name="requestId" />
                    <div class="mb-3">
                        <label for="assignOverdueUserId" class="form-label">Assign to:</label>
                        <select id="assignOverdueUserId" name="assignedToUserId" class="form-select" asp-items="ViewBag.AssignableUsers" required>
                            <option value="">Select User...</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Assign Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Event delegation for Take Ownership buttons in the table
            $('table').on('click', '.take-ownership-overdue', function () {
                const btn = $(this);
                const specificRequestId = btn.data('request-id'); // Get requestId from data attribute

                Swal.fire({
                    title: 'Take Ownership?',
                    text: "Do you want to assign this request (#" + specificRequestId + ") to yourself?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, take it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Assuming handleAjax is globally available or defined elsewhere (e.g., in site.js or layout)
                        // If not, its definition would need to be included or adapted here.
                        handleAjax({
                            url: `/Requests/TakeOwnership/${specificRequestId}`,
                            button: btn,
                            successCallback: function(response) {
                                if(response.success) {
                                    showToast('success', response.message || 'Request assigned to you.');
                                    var row = btn.closest('tr');
                                    // Update status badge - find badge that is either for Submitted (bg-info) or InProgress (bg-warning)
                                    row.find('.badge.bg-info, .badge.bg-warning').removeClass('bg-info bg-warning text-dark').addClass('bg-warning text-dark').text('InProgress');
                                    row.find('td:nth-child(9)').html(response.assignedUserName || 'You (Assigned)'); // Use assignedUserName from response
                                    btn.remove(); 
                                    row.find('.assign-request-overdue').text('Re-assign');
                                } else {
                                    showToast('error', response.message || 'Failed to take ownership.');
                                }
                            },
                            errorCallback: function() {
                                showToast('error', 'An error occurred while taking ownership.');
                            }
                        });
                    }
                });
            });

            // Assign request button click
            $('table').on('click', '.assign-request-overdue', function () {
                const requestId = $(this).data('request-id');
                $('#assignOverdueRequestId').val(requestId);
                // Potentially load assignable users if not already in ViewBag.AssignableUsers or if it needs filtering
            });

            // Assign request form submission
            $('#assignRequestOverdueForm').submit(function (e) {
                e.preventDefault();
                const btn = $(this).find('button[type="submit"]');
                const requestId = $('#assignOverdueRequestId').val();
                const assignedToUserId = $('#assignOverdueUserId').val();

                if (!assignedToUserId) {
                    showToast('warning', 'Please select a user to assign.');
                    return;
                }

                handleAjax({
                    url: `/Requests/Assign/${requestId}`,
                    type: 'POST',
                    data: { assignedToUserId: assignedToUserId }, // Ensure data is sent in a way the controller expects
                    button: btn,
                    successCallback: function(response) {
                        if(response.success) {
                            showToast('success', response.message || 'Request assigned successfully.');
                            $('#assignRequestModalOverdue').modal('hide');
                            var row = $('table tr').filter(function() { return $(this).find('a[href*="/Requests/Details/' + requestId + '"]').length > 0; });
                            // Update status badge - find badge that is either for Submitted (bg-info) or InProgress (bg-warning)
                            row.find('.badge.bg-info, .badge.bg-warning').removeClass('bg-info bg-warning text-dark').addClass('bg-warning text-dark').text('InProgress');
                            row.find('td:nth-child(9)').html(response.assignedUserName || 'User Assigned'); // Use assignedUserName from response
                            row.find('.take-ownership-overdue').remove(); 
                            row.find('.assign-request-overdue').text('Re-assign');
                        } else {
                            showToast('error', response.message || 'Failed to assign request.');
                        }
                    },
                    errorCallback: function() {
                        showToast('error', 'An error occurred while assigning the request.');
                    },
                    modalToHide: '#assignRequestModalOverdue'
                });
            });

            // Complete request button click
            $('table').on('click', '.complete-request-overdue', function () {
                const btn = $(this);
                const requestId = btn.data('request-id');

                Swal.fire({
                    title: 'Complete Request #' + requestId + ' ?',
                    input: 'textarea',
                    inputPlaceholder: 'Enter optional completion notes here...',
                    showCancelButton: true,
                    confirmButtonText: 'Complete',
                    confirmButtonColor: '#28a745',
                    showLoaderOnConfirm: true,
                    preConfirm: (comments) => {
                        return $.ajax({
                            url: `/Requests/Complete/${requestId}`,
                            type: 'POST',
                            data: { comments: comments }, // Controller expects an object with a comments property
                            headers: {
                                RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() // Add anti-forgery token if needed
                            }
                        })
                        .fail(function(jqXHR, textStatus, errorThrown) {
                            Swal.showValidationMessage(`Request failed: ${errorThrown}`);
                        });
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    if (result.isConfirmed && result.value && result.value.success) {
                        showToast('success', result.value.message || 'Request completed successfully.');
                        var row = btn.closest('tr');
                        // Update status badge - find badge that is for InProgress (bg-warning)
                        row.find('.badge.bg-warning').removeClass('bg-warning text-dark').addClass('bg-success').text('Completed');
                        btn.remove(); 
                        row.find('.assign-request-overdue').remove(); 
                        row.find('.take-ownership-overdue').remove(); // Remove take ownership button
                    } else if (result.isConfirmed && result.value && !result.value.success) {
                        showToast('error', result.value.message || 'Failed to complete request.');
                    }
                });
            });
        });

        // Simplified handleAjax and showToast (ensure these are globally available or uncomment and use these)
        
        function handleAjax(options) { // Un-commented this function
            const btn = options.button;
            const originalText = btn.html();
            btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');

            $.ajax({
                url: options.url,
                type: options.type || 'POST',
                contentType: (options.type === 'POST' && typeof options.data === 'object' && options.data !== null && !(options.data instanceof FormData)) ? 'application/x-www-form-urlencoded; charset=UTF-8' : (options.data instanceof FormData ? false : 'application/json'),
                data: (options.data instanceof FormData) ? options.data : ((options.type === 'POST' && typeof options.data === 'object' && options.data !== null) ? options.data : JSON.stringify(options.data)),
                processData: !(options.data instanceof FormData),
                headers: {
                    RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (options.successCallback) {
                        options.successCallback(response);
                    } else {
                        if (response.success) {
                            showToast('success', response.message || 'Operation successful.');
                            if(response.redirectUrl) {
                                window.location.href = response.redirectUrl;
                            }
                        } else {
                            showToast('error', response.message || 'Operation failed.');
                        }
                    }
                },
                error: function (xhr, status, error) {
                    if (options.errorCallback) {
                        options.errorCallback(xhr, status, error);
                    } else {
                        showToast('error', `Error: ${xhr.status} - ${error}`);
                    }
                },
                complete: function () {
                    btn.prop('disabled', false).html(originalText);
                    if (options.modalToHide) $(options.modalToHide).modal('hide');
                }
            });
        }

        function showToast(icon, title) { // Un-commented this function (Swal version)
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: icon,
                title: title,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
        
    </script>
}
