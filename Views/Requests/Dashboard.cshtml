@model HospitalAssetTracker.Models.RequestDashboardData
@{
    ViewData["Title"] = "Requests Dashboard";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div class="page-header">
                    <h1 class="page-title mb-0">
                        <i class="fas fa-ticket-alt text-primary"></i> Requests Dashboard
                    </h1>
                    <p class="text-muted mb-0">Monitor IT requests, assignments, and service performance</p>
                </div>
                
                <!-- Advanced Features Navigation -->
                <div class="btn-group">
                    <a href="@Url.Action("Analytics", "Requests")" class="btn btn-outline-primary">
                        <i class="fas fa-chart-line me-1"></i>Analytics
                    </a>
                    <a href="@Url.Action("Reports", "Requests")" class="btn btn-outline-success">
                        <i class="fas fa-file-chart-line me-1"></i>Reports
                    </a>
                    <a href="@Url.Action("Templates", "Requests")" class="btn btn-outline-info">
                        <i class="fas fa-file-alt me-1"></i>Templates
                    </a>
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-warning dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="fas fa-cogs me-1"></i>Advanced
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="manageEscalations()">
                                <i class="fas fa-exclamation-triangle me-2"></i>Manage Escalations
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="optimizeWorkload()">
                                <i class="fas fa-balance-scale me-2"></i>Optimize Workload
                            </a></li>
                            <li><a class="dropdown-item" href="#" onclick="autoRebalance()">
                                <i class="fas fa-sync-alt me-2"></i>Auto Rebalance
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="bulkOperations()">
                                <i class="fas fa-layer-group me-2"></i>Bulk Operations
                            </a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.TotalRequests</h4>
                            <p class="mb-0">Total Requests</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-ticket-alt fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.SubmittedRequests</h4> @* Changed from PendingRequests *@
                            <p class="mb-0">Submitted Requests</p> @* Changed title *@
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.InProgressRequests</h4>
                            <p class="mb-0">In Progress</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-cogs fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.OverdueRequests</h4>
                            <p class="mb-0">Overdue</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <!-- Request Trends Chart -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-line me-2"></i>Request Trends (Last 30 Days)
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="trendsChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>

        <!-- Request Types Distribution -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-pie me-2"></i>Request Types
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="typesChart" width="300" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity and Priority Requests -->
    <div class="row">
        <!-- High Priority Requests -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-fire text-danger me-2"></i>High Priority Requests
                    </h5>
                    <a asp-action="Index" asp-route-priority="High" class="btn btn-sm btn-outline-danger">View All</a>
                </div>
                <div class="card-body">
                    @if (Model.HighPriorityRequests?.Any() == true) // Un-commented this section
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var request in Model.HighPriorityRequests) // Removed .Take(5) to show all fetched, service already limits to 10
                            {
                                <div class="list-group-item border-0 px-0">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">
                                                <a href="/Requests/Details/@request.Id" class="text-decoration-none">
                                                    @request.Title
                                                </a>
                                            </h6>
                                            <p class="mb-1 text-muted small">@(request.Description != null && request.Description.Length > 100 ? request.Description.Substring(0, 100) + "..." : request.Description)</p>
                                            <small class="text-muted">
                                                <i class="fas fa-user"></i> @request.RequesterName
                                                | <i class="fas fa-calendar"></i> @request.RequestDate.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-@(request.Priority == "Critical" ? "danger" : "warning text-dark")">@request.Priority</span>
                                            <br>
                                            <span class="badge bg-@(request.Status == "Submitted" ? "primary" : 
                                                                request.Status == "InProgress" ? "info text-dark" : 
                                                                request.Status == "OnHold" ? "secondary" : "light text-dark")">
                                                @request.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">No high priority requests</p>
                    }
                </div>
            </div>
        </div>

        <!-- Recent Requests -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-history me-2"></i>Recent Activity
                    </h5>
                    <a asp-action="Index" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (Model.RecentRequests?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var request in Model.RecentRequests.Take(5))
                            {
                                <div class="list-group-item border-0 px-0">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">
                                                <a href="/Requests/Details/@request.Id" class="text-decoration-none">
                                                    @request.Title
                                                </a>
                                            </h6>
                                            <p class="mb-1 text-muted small">@request.RequestType</p>
                                            <small class="text-muted">
                                                <i class="fas fa-user"></i> @request.RequesterName
                                                | <i class="fas fa-calendar"></i> @request.RequestDate.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-@(request.Priority == "Critical" ? "danger" : 
                                                request.Priority == "High" ? "warning" : 
                                                request.Priority == "Medium" ? "info" : "secondary")">
                                                @request.Priority
                                            </span>
                                            <br>
                                            <span class="badge bg-@(request.Status == "Submitted" ? "primary" : 
                                                                request.Status == "InProgress" ? "info text-dark" : 
                                                                request.Status == "Completed" ? "success" : 
                                                                request.Status == "OnHold" ? "secondary" : "light text-dark")">
                                                @request.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">No recent requests</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- My Assignments Section (for IT Staff) -->
    @if (User.IsInRole("IT Support") || User.IsInRole("IT Manager"))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-user-clock me-2"></i>My Current Assignments
                        </h5>
                        <a asp-action="AssignedToMe" class="btn btn-sm btn-outline-info">View All My Assignments</a>
                    </div>
                    <div class="card-body">
                        @* @if (Model.MyAssignments?.Any() == true) // This section remains commented as MyAssignments is not yet re-implemented
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Request</th>
                                            <th>Priority</th>
                                            <th>Type</th>
                                            <th>Requested By</th>
                                            <th>Due Date</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var request in Model.MyAssignments.Take(5))
                                        {
                                            <tr class="@(request.Priority == "Critical" ? "table-danger" : "")">
                                                <td>
                                                    <a href="/Requests/Details/@request.Id" class="text-decoration-none">
                                                        @request.Title
                                                    </a>
                                                </td>
                                                <td>
                                                    <span class="badge bg-@(request.Priority == "Critical" ? "danger" : 
                                                        request.Priority == "High" ? "warning" : 
                                                        request.Priority == "Medium" ? "info" : "secondary")">
                                                        @request.Priority
                                                    </span>
                                                </td>
                                                <td>@request.RequestType</td>
                                                <td>@request.RequesterName</td>
                                                <td>@request.DueDate?.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    <span class="badge bg-@(request.Status == "Submitted" ? "warning" : // Changed from Pending
                                                        request.Status == "InProgress" ? "info" : 
                                                        request.Status == "Completed" ? "success" : "secondary")">
                                                        @request.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    <a href="/Requests/Details/@request.Id" class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        { *@
                            <p class="text-muted text-center py-3">No current assignments (Section under review)</p>
                        @* } *@
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="~/js/app-helpers.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Trends Chart
        const trendsCtx = document.getElementById('trendsChart').getContext('2d');
        new Chart(trendsCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.RequestsByType.Keys)),
                datasets: [{
                    label: 'Requests Created',
                    data: @Html.Raw(Json.Serialize(Model.RequestsByType.Values)),
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Types Chart
        const typesCtx = document.getElementById('typesChart').getContext('2d');
        new Chart(typesCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.RequestsByPriority.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.RequestsByPriority.Values)),
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF',
                        '#FF9F40'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Advanced Operations Functions
        function manageEscalations() {
            if (confirm('Run intelligent escalation management? This will automatically escalate overdue requests.')) {
                $.ajax({
                    url: '@Url.Action("ManageEscalations", "Requests")',
                    type: 'POST',
                    success: function(response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(() => window.location.reload(), 2000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function() {
                        toastr.error('Failed to manage escalations');
                    }
                });
            }
        }

        function optimizeWorkload() {
            if (confirm('Optimize assignment distribution? This will analyze and suggest workload improvements.')) {
                $.ajax({
                    url: '@Url.Action("OptimizeAssignments", "Requests")',
                    type: 'POST',
                    success: function(response) {
                        if (response.success) {
                            toastr.success(response.message);
                            if (response.data && response.data.Recommendations) {
                                showOptimizationResults(response.data);
                            }
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function() {
                        toastr.error('Failed to optimize assignments');
                    }
                });
            }
        }

        function autoRebalance() {
            if (confirm('Auto-rebalance workload among team members? This will redistribute assignments.')) {
                $.ajax({
                    url: '@Url.Action("AutoRebalanceWorkload", "Requests")',
                    type: 'POST',
                    success: function(response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(() => window.location.reload(), 2000);
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function() {
                        toastr.error('Failed to auto-rebalance workload');
                    }
                });
            }
        }

        function bulkOperations() {
            toastr.info('Bulk operations feature - navigate to the main requests list for batch actions');
            window.location.href = '@Url.Action("Index", "Requests")';
        }

        function showOptimizationResults(data) {
            let message = 'Optimization completed successfully!';
            if (data.Recommendations && data.Recommendations.length > 0) {
                message += '\\n\\nRecommendations:\\n';
                data.Recommendations.slice(0, 3).forEach(rec => {
                    message += '• ' + rec + '\\n';
                });
            }
            alert(message);
        }
    </script>
}
