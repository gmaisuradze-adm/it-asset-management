@model ITRequest

@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = $"Request Details - #{Model.RequestNumber}";
    var currentUser = await UserManager.GetUserAsync(User);
    IList<string> userRoles = new List<string>();
    if (currentUser != null)
    {
        userRoles = await UserManager.GetRolesAsync(currentUser);
    }

    bool isManagerOrSupport = userRoles.Contains("Admin") || userRoles.Contains("IT Support") || userRoles.Contains("Asset Manager");
    bool isSupport = userRoles.Contains("Admin") || userRoles.Contains("IT Support");
    bool isOwner = currentUser != null && Model.AssignedToUserId == currentUser.Id;
    bool isRequester = currentUser != null && Model.RequestedByUserId == currentUser.Id;

    bool canTakeOwnership = isSupport && Model.AssignedToUserId == null && Model.Status == RequestStatus.Submitted;
    bool canAssign = isManagerOrSupport && Model.Status != RequestStatus.Completed && Model.Status != RequestStatus.Cancelled;
    bool canComplete = isOwner && Model.Status == RequestStatus.InProgress;
    bool canEdit = (isRequester || isManagerOrSupport) && Model.Status != RequestStatus.Completed && Model.Status != RequestStatus.Cancelled;
    bool canCancel = (isRequester || isSupport) && Model.Status != RequestStatus.Completed && Model.Status != RequestStatus.Cancelled;
    bool canPlaceOnHold = isOwner && Model.Status == RequestStatus.InProgress;
    bool canResume = isOwner && Model.Status == RequestStatus.OnHold;

    // Pass flags to the partial view
    ViewData["canTakeOwnership"] = canTakeOwnership;
    ViewData["canAssign"] = canAssign;
    ViewData["canComplete"] = canComplete;
    ViewData["canCancel"] = canCancel;
    ViewData["canPlaceOnHold"] = canPlaceOnHold;
    ViewData["canResume"] = canResume;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <small class="text-muted">Track and manage this IT request from submission to completion.</small>
    </div>
    <div class="btn-group">
        @if (canEdit)
        {
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                <i class="bi bi-pencil-square"></i> Edit
            </a>
        }
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <!-- Request Details Card -->
        <div class="card mb-4">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0"><i class="bi bi-file-earmark-text"></i> Request Information</h5>
                <span id="status-badge" class="badge @GetStatusClass(Model.Status)">
                    @Model.Status.ToString()
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-5">Title:</dt>
                            <dd class="col-sm-7">@Model.Title</dd>

                            <dt class="col-sm-5">Priority:</dt>
                            <dd class="col-sm-7">
                                <span class="badge @GetPriorityClass(Model.Priority)">@Model.Priority</span>
                            </dd>

                            <dt class="col-sm-5">Request Type:</dt>
                            <dd class="col-sm-7">@Model.RequestType.ToString().Replace("_", " ")</dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-5">Requested By:</dt>
                            <dd class="col-sm-7">
                                @(Model.RequestedByUser?.FullName ?? "N/A")
                                @if (!string.IsNullOrEmpty(Model.Department))
                                {
                                    <br><small class="text-muted">@Model.Department</small>
                                }
                            </dd>

                            <dt class="col-sm-5">Request Date:</dt>
                            <dd class="col-sm-7">@Model.RequestDate.ToString("g")</dd>

                            <dt class="col-sm-5">Required By:</dt>
                            <dd class="col-sm-7">
                                @(Model.RequiredByDate.HasValue ? Model.RequiredByDate.Value.ToString("d") : "Not specified")
                            </dd>
                        </dl>
                    </div>
                </div>
                <hr>
                <h6><i class="bi bi-card-text"></i> Description</h6>
                <div class="p-3 bg-light rounded">
                    @Html.Raw(Model.Description?.Replace("\n", "<br />") ?? "No description provided.")
                </div>

                @if (!string.IsNullOrEmpty(Model.BusinessJustification))
                {
                    <hr>
                    <h6><i class="bi bi-briefcase"></i> Business Justification</h6>
                    <div class="p-3 bg-light rounded">
                         @Html.Raw(Model.BusinessJustification?.Replace("\n", "<br />"))
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Management Card -->
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0"><i class="bi bi-gear-wide-connected"></i> Management</h5>
            </div>
            <div id="management-section" class="card-body">
                @await Html.PartialAsync("_RequestManagementPartial", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
$(function () {
    const token = $('input[name="__RequestVerificationToken"]').first().val();
    const requestId = @Model.Id;

    const showToast = (icon, title) => {
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: icon,
            title: title,
            showConfirmButton: false,
            timer: 3500,
            timerProgressBar: true
        });
    };

    const handleAjax = (options) => {
        const button = options.button;
        let originalHtml = '';
        if (button) {
            originalHtml = button.html();
            button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');
        }

        $.ajax({
            url: options.url,
            type: 'POST',
            data: options.data,
            headers: { "RequestVerificationToken": token },
            success: function (response) {
                if (response.success) {
                    showToast('success', response.message);
                    
                    if (response.newStatus && response.statusClass) {
                        const badge = $('#status-badge');
                        badge.text(response.newStatus);
                        badge.removeClass().addClass('badge ' + response.statusClass);
                    }

                    if (response.updatedHtml) {
                        $('#management-section').html(response.updatedHtml);
                        // Re-initialize any plugins if necessary
                    }

                } else {
                    showToast('error', response.message || 'An unknown error occurred.');
                }
            },
            error: function (jqXHR) {
                const errorMsg = jqXHR.responseJSON?.message || 'An unexpected error occurred.';
                showToast('error', errorMsg);
            },
            complete: function() {
                if (button) {
                    button.prop('disabled', false).html(originalHtml);
                }
            }
        });
    };

    // Use event delegation for dynamically loaded content
    $('#management-section').on('click', '#take-ownership-btn', function () {
        const btn = $(this);
        Swal.fire({
            title: 'Take Ownership?',
            text: "Do you want to assign this request to yourself?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, take it!'
        }).then((result) => {
            if (result.isConfirmed) {
                handleAjax({
                    url: `/Requests/TakeOwnership/${requestId}`,
                    button: btn
                });
            }
        });
    });

    $('#management-section').on('submit', '#assign-form', function (e) {
        e.preventDefault();
        const userId = $('#assign-user-select').val();
        if (!userId) {
            showToast('warning', 'Please select a user to assign.');
            return;
        }
        handleAjax({
            url: `/Requests/Assign/${requestId}`,
            data: $(this).serialize(),
            button: $('#assign-submit-btn')
        });
    });

    $('#management-section').on('click', '#complete-btn', async function () {
        const btn = $(this);
        const { value: comments } = await Swal.fire({
            title: 'Complete Request',
            input: 'textarea',
            inputPlaceholder: 'Enter optional completion notes here...',
            showCancelButton: true,
            confirmButtonText: 'Complete',
            confirmButtonColor: '#17a2b8'
        });

        if (comments !== undefined) {
            handleAjax({
                url: `/Requests/Complete/${requestId}`,
                data: { comments: comments },
                button: btn
            });
        }
    });

    $('#management-section').on('click', '#cancel-btn', async function () {
        const btn = $(this);
        const { value: comments } = await Swal.fire({
            title: 'Cancel Request',
            input: 'textarea',
            inputLabel: 'Reason for Cancellation',
            inputPlaceholder: 'You must provide a reason for cancellation...',
            showCancelButton: true,
            confirmButtonText: 'Confirm Cancellation',
            confirmButtonColor: '#dc3545',
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to provide a reason for cancellation!'
                }
            }
        });

        if (comments) {
            handleAjax({
                url: `/Requests/Cancel/${requestId}`,
                data: { comments: comments },
                button: btn
            });
        }
    });

    $('#management-section').on('click', '#onhold-btn', async function () {
        const btn = $(this);
        const { value: comments } = await Swal.fire({
            title: 'Place Request On Hold',
            input: 'textarea',
            inputPlaceholder: 'Enter optional comments for placing the request on hold...',
            showCancelButton: true,
            confirmButtonText: 'Place on Hold',
            confirmButtonColor: '#ffc107'
        });

        if (comments !== undefined) {
            handleAjax({
                url: `/Requests/PlaceOnHold/${requestId}`,
                data: { comments: comments },
                button: btn
            });
        }
    });

    $('#management-section').on('click', '#resume-btn', async function () {
        const btn = $(this);
        const { value: comments } = await Swal.fire({
            title: 'Resume Request',
            input: 'textarea',
            inputPlaceholder: 'Enter optional comments for resuming the request...',
            showCancelButton: true,
            confirmButtonText: 'Resume',
            confirmButtonColor: '#17a2b8'
        });

        if (comments !== undefined) {
            handleAjax({
                url: `/Requests/Resume/${requestId}`,
                data: { comments: comments },
                button: btn
            });
        }
    });
});
</script>
}

@functions {
    private string GetStatusClass(RequestStatus status) => status switch
    {
        RequestStatus.Submitted => "bg-primary",
        RequestStatus.InProgress => "bg-warning text-dark", // Standardized
        RequestStatus.OnHold => "bg-secondary",         // Standardized
        RequestStatus.Completed => "bg-success",
        RequestStatus.Cancelled => "bg-danger",
        _ => "bg-light text-dark"
    };

    private string GetPriorityClass(RequestPriority priority) => priority switch
    {
        RequestPriority.Critical => "bg-danger",
        RequestPriority.High => "bg-warning text-dark",
        RequestPriority.Medium => "bg-info text-dark",
        RequestPriority.Low => "bg-success",
        _ => "bg-secondary"
    };
}
