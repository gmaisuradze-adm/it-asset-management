@model ITRequest

@{
    ViewData["Title"] = "Request Details";
    var canEdit = ViewBag.CanEdit as bool? ?? false;
    var canAssign = ViewBag.CanAssign as bool? ?? false;
    var canApprove = ViewBag.CanApprove as bool? ?? false;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>@ViewData["Title"] - #@Model.Id</h2>
    <div>
        @if (canEdit && (Model.Status == RequestStatus.Open || Model.Status == RequestStatus.InProgress))
        {
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                <i class="fas fa-edit"></i> Edit
            </a>
        }
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to List
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Request Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <dl>
                            <dt>Request Type</dt>
                            <dd>
                                <span class="badge bg-secondary">
                                    @Model.RequestType.ToString().Replace("_", " ")
                                </span>
                            </dd>

                            <dt>Title</dt>
                            <dd>@Model.Title</dd>

                            <dt>Priority</dt>
                            <dd>
                                @{
                                    var priorityClass = Model.Priority switch
                                    {
                                        RequestPriority.High => "bg-danger",
                                        RequestPriority.Medium => "bg-warning text-dark",
                                        RequestPriority.Low => "bg-success",
                                        _ => "bg-secondary"
                                    };
                                }
                                <span class="badge @priorityClass">@Model.Priority</span>
                            </dd>

                            <dt>Status</dt>
                            <dd>
                                @{
                                    var statusClass = Model.Status switch
                                    {
                                        RequestStatus.Open => "bg-primary",
                                        RequestStatus.InProgress => "bg-info",
                                        RequestStatus.PendingApproval => "bg-warning text-dark",
                                        RequestStatus.Approved => "bg-success",
                                        RequestStatus.Completed => "bg-success",
                                        RequestStatus.Cancelled => "bg-danger",
                                        RequestStatus.Rejected => "bg-danger",
                                        _ => "bg-secondary"
                                    };
                                }
                                <span class="badge @statusClass">
                                    @Model.Status.ToString().Replace("_", " ")
                                </span>
                            </dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <dl>
                            <dt>Requested By</dt>
                            <dd>
                                @if (Model.RequestedByUser != null)
                                {
                                    @Model.RequestedByUser.FirstName @Model.RequestedByUser.LastName
                                    <br><small class="text-muted">@Model.RequestedByUser.Email</small>
                                }
                                else
                                {
                                    <span class="text-muted">Unknown</span>
                                }
                            </dd>

                            <dt>Assigned To</dt>
                            <dd>
                                @if (Model.AssignedToUser != null)
                                {
                                    @Model.AssignedToUser.FirstName @Model.AssignedToUser.LastName
                                    <br><small class="text-muted">@Model.AssignedToUser.Email</small>
                                }
                                else
                                {
                                    <span class="text-muted">Not assigned</span>
                                }
                            </dd>

                            <dt>Created Date</dt>
                            <dd>@Model.CreatedDate.ToString("MM/dd/yyyy HH:mm")</dd>

                            <dt>Due Date</dt>
                            <dd>
                                @if (Model.DueDate.HasValue)
                                {
                                    var isOverdue = Model.DueDate.Value < DateTime.Now && Model.Status != RequestStatus.Completed;
                                    <span class="@(isOverdue ? "text-danger fw-bold" : "")">
                                        @Model.DueDate.Value.ToString("MM/dd/yyyy")
                                    </span>
                                    @if (isOverdue)
                                    {
                                        <i class="fas fa-exclamation-triangle text-danger ms-1" title="Overdue"></i>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted">Not set</span>
                                }
                            </dd>
                        </dl>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <hr>
                    <dt>Description</dt>
                    <dd class="mt-2">
                        <div class="border rounded p-3 bg-light">
                            @Html.Raw(Model.Description.Replace("\n", "<br>"))
                        </div>
                    </dd>
                }
            </div>
        </div>

        @if (Model.RelatedAsset != null)
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Related Asset</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <dl>
                                <dt>Asset Tag</dt>
                                <dd>@Model.RelatedAsset.AssetTag</dd>

                                <dt>Category</dt>
                                <dd>@Model.RelatedAsset.Category</dd>

                                <dt>Brand/Model</dt>
                                <dd>@Model.RelatedAsset.Brand @Model.RelatedAsset.Model</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <dl>
                                <dt>Serial Number</dt>
                                <dd>@Model.RelatedAsset.SerialNumber</dd>

                                <dt>Status</dt>
                                <dd>
                                    <span class="badge bg-info">@Model.RelatedAsset.Status</span>
                                </dd>

                                <dt>Location</dt>
                                <dd>
                                    @if (Model.RelatedAsset.Location != null)
                                    {
                                        <text>@Model.RelatedAsset.Location.Building - @Model.RelatedAsset.Location.Floor - @Model.RelatedAsset.Location.Room</text>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not assigned</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        @if (canAssign && Model.Status == RequestStatus.Open)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Assign Request</h5>
                </div>
                <div class="card-body">
                    @if (Model.AssignedToUserId == null && (User.IsInRole("Admin") || User.IsInRole("IT Support")))
                    {
                        <div class="mb-3">
                            <form asp-action="TakeOwnership" method="post" style="display: inline;">
                                <input type="hidden" name="id" value="@Model.Id" />
                                <button type="submit" class="btn btn-success btn-sm w-100 mb-2">
                                    <i class="fas fa-hand-paper"></i> Take Ownership
                                </button>
                            </form>
                            <hr>
                            <small class="text-muted">Or assign to someone else:</small>
                        </div>
                    }
                    
                    <form asp-action="Assign" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="assignedToUserId" class="form-label">Assign To</label>
                            <select class="form-select" name="assignedToUserId" required>
                                <option value="">Select a user...</option>
                                @if (ViewBag.ITUsers != null)
                                {
                                    @foreach (var user in ViewBag.ITUsers as IEnumerable<SelectListItem>)
                                    {
                                        <option value="@user.Value">@user.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-user-check"></i> Assign to Selected User
                        </button>
                    </form>
                </div>
            </div>
        }

        @if (canApprove && Model.Status == RequestStatus.PendingApproval)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Approval Required</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Approve" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="comments" class="form-label">Comments (optional)</label>
                            <textarea class="form-control" name="comments" rows="3" placeholder="Enter approval comments..."></textarea>
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-check"></i> Approve
                            </button>
                            <button type="button" class="btn btn-danger" onclick="rejectRequest(@Model.Id)">
                                <i class="fas fa-times"></i> Reject
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        }

        @if (Model.Status == RequestStatus.InProgress && (Model.AssignedToUserId == ViewBag.CurrentUserId || canApprove))
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Complete Request</h5>
                </div>
                <div class="card-body">
                    <button type="button" class="btn btn-success" onclick="completeRequest(@Model.Id)">
                        <i class="fas fa-check-circle"></i> Mark Complete
                    </button>
                </div>
            </div>
        }

        @if (Model.AssignedToUserId != null && canAssign)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Reassign Request</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Assign" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="assignedToUserId" class="form-label">Reassign To</label>
                            <select class="form-select" name="assignedToUserId" required>
                                <option value="">Select a user...</option>
                                @if (ViewBag.ITUsers != null)
                                {
                                    @foreach (var user in ViewBag.ITUsers as IEnumerable<SelectListItem>)
                                    {
                                        <option value="@user.Value" selected="@(user.Value == Model.AssignedToUserId)">@user.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <button type="submit" class="btn btn-warning w-100">
                            <i class="fas fa-exchange-alt"></i> Reassign
                        </button>
                    </form>
                </div>
            </div>
        }

        @if (canAssign && (User.IsInRole("Admin") || User.IsInRole("IT Support") || User.IsInRole("Asset Manager")))
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">Advanced Management</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-2">
                                <label class="form-label">Priority</label>
                                <select id="prioritySelect" class="form-select form-select-sm">
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                            </div>
                            <button type="button" class="btn btn-outline-warning btn-sm w-100" onclick="changePriority(@Model.Id)">
                                <i class="fas fa-exclamation-triangle"></i> Change Priority
                            </button>
                        </div>
                        <div class="col-md-6">
                            @if (Model.Status != RequestStatus.Completed && Model.Status != RequestStatus.Cancelled)
                            {
                                <button type="button" class="btn btn-outline-danger btn-sm w-100 mb-2" onclick="escalateRequest(@Model.Id)">
                                    <i class="fas fa-level-up-alt"></i> Escalate
                                </button>
                                <button type="button" class="btn btn-outline-info btn-sm w-100" onclick="transferRequest(@Model.Id)">
                                    <i class="fas fa-share"></i> Transfer
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Request Timeline</h5>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker bg-primary"></div>
                        <div class="timeline-content">
                            <h6 class="timeline-title">Request Created</h6>
                            <p class="timeline-date">@Model.CreatedDate.ToString("MM/dd/yyyy HH:mm")</p>
                        </div>
                    </div>
                    
                    @if (Model.AssignedToUser != null)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-info"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Assigned to @Model.AssignedToUser.FirstName @Model.AssignedToUser.LastName</h6>
                            </div>
                        </div>
                    }
                    
                    @if (Model.Status == RequestStatus.Completed)
                    {
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Request Completed</h6>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set current priority as selected
            $('#prioritySelect').val('@Model.Priority');
        });
        
        function changePriority(requestId) {
            const newPriority = document.getElementById('prioritySelect').value;
            const currentPriority = '@Model.Priority';
            
            if (newPriority === currentPriority) {
                Swal.fire('No Change', 'Priority is already set to the selected level.', 'info');
                return;
            }
            
            Swal.fire({
                title: 'Change Priority',
                input: 'textarea',
                inputLabel: 'Reason for priority change',
                inputPlaceholder: 'Explain why the priority needs to be changed...',
                showCancelButton: true,
                confirmButtonText: 'Change Priority',
                confirmButtonColor: '#ffc107',
                cancelButtonText: 'Cancel',
                preConfirm: (reason) => {
                    return $.ajax({
                        url: '@Url.Action("ChangePriority", "Requests")',
                        type: 'POST',
                        data: {
                            id: requestId,
                            newPriority: newPriority,
                            reason: reason,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    if (result.value && result.value.success) {
                        Swal.fire(
                            'Priority Changed!',
                            `Priority changed to ${newPriority}`,
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error!', result.value?.message || 'Failed to change priority', 'error');
                    }
                }
            });
        }

        function completeRequest(requestId) {
            Swal.fire({
                title: 'Complete Request',
                input: 'textarea',
                inputLabel: 'Completion Notes (optional)',
                inputPlaceholder: 'Enter any completion notes...',
                showCancelButton: true,
                confirmButtonText: 'Mark Complete',
                confirmButtonColor: '#28a745',
                cancelButtonText: 'Cancel',
                preConfirm: (notes) => {
                    return $.ajax({
                        url: '@Url.Action("Complete", "Requests")',
                        type: 'POST',
                        data: {
                            id: requestId,
                            completionNotes: notes,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire(
                        'Completed!',
                        'The request has been marked as complete.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                }
            }).catch((error) => {
                Swal.fire(
                    'Error!',
                    'Failed to complete request: ' + (error.responseText || 'Unknown error'),
                    'error'
                );
            });
        }

        function rejectRequest(requestId) {
            Swal.fire({
                title: 'Reject Request',
                input: 'textarea',
                inputLabel: 'Rejection Reason (required)',
                inputPlaceholder: 'Please provide a reason for rejection...',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to provide a rejection reason!'
                    }
                },
                showCancelButton: true,
                confirmButtonText: 'Reject Request',
                confirmButtonColor: '#dc3545',
                cancelButtonText: 'Cancel',
                preConfirm: (reason) => {
                    return $.ajax({
                        url: '@Url.Action("Reject", "Requests")',
                        type: 'POST',
                        data: {
                            id: requestId,
                            rejectionReason: reason,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire(
                        'Rejected!',
                        'The request has been rejected.',
                        'info'
                    ).then(() => {
                        location.reload();
                    });
                }
            }).catch((error) => {
                Swal.fire(
                    'Error!',
                    'Failed to reject request: ' + (error.responseText || 'Unknown error'),
                    'error'
                );
            });
        }

        function escalateRequest(requestId) {
            // First, get available users for escalation
            $.ajax({
                url: '@Url.Action("GetAvailableUsers", "Requests")',
                type: 'GET',
                data: { role: 'Admin,IT Support,Asset Manager' }
            })
            .then((users) => {
                let options = '<option value="">Select user to escalate to...</option>';
                users.forEach(user => {
                    options += `<option value="${user.id}">${user.firstName} ${user.lastName} (${user.department || 'N/A'})</option>`;
                });
                
                Swal.fire({
                    title: 'Escalate Request',
                    html: `
                        <div class="mb-3">
                            <label class="form-label">Escalate To</label>
                            <select id="escalateTarget" class="form-select">
                                ${options}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Escalation Reason</label>
                            <textarea id="escalationReason" class="form-control" rows="3" placeholder="Reason for escalation..." required></textarea>
                        </div>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Escalate',
                    confirmButtonColor: '#dc3545',
                    cancelButtonText: 'Cancel',
                    preConfirm: () => {
                        const target = document.getElementById('escalateTarget').value;
                        const reason = document.getElementById('escalationReason').value;
                        
                        if (!target) {
                            Swal.showValidationMessage('Please select a user to escalate to');
                            return false;
                        }
                        
                        if (!reason) {
                            Swal.showValidationMessage('Please provide an escalation reason');
                            return false;
                        }
                        
                        return $.ajax({
                            url: '@Url.Action("Escalate", "Requests")',
                            type: 'POST',
                            data: {
                                id: requestId,
                                escalateToUserId: target,
                                reason: reason,
                                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                            }
                        });
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        if (result.value && result.value.success) {
                            Swal.fire(
                                'Escalated!',
                                result.value.message,
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire('Error!', result.value?.message || 'Failed to escalate request', 'error');
                        }
                    }
                });
            })
            .catch(() => {
                Swal.fire('Error!', 'Failed to load escalation targets', 'error');
            });
        }
                    });
                }
            }).catch((error) => {
                Swal.fire(
                    'Error!',
                    'Failed to escalate request: ' + (error.responseText || 'Unknown error'),
                    'error'
                );
            });
        }

        function transferRequest(requestId) {
            // Get available departments/users for transfer
            $.get('@Url.Action("GetTransferTargets", "Requests")')
                .then(data => {
                    const options = data.map(item => `<option value="${item.id}">${item.name}</option>`).join('');
                    
                    Swal.fire({
                        title: 'Transfer Request',
                        html: `
                            <div class="mb-3">
                                <label class="form-label">Transfer To</label>
                                <select id="transferTarget" class="form-select">
                                    <option value="">Select target...</option>
                                    ${options}
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Transfer Reason</label>
                                <textarea id="transferReason" class="form-control" rows="3" placeholder="Reason for transfer..." required></textarea>
                            </div>
                        `,
                        showCancelButton: true,
                        confirmButtonText: 'Transfer',
                        confirmButtonColor: '#17a2b8',
                        cancelButtonText: 'Cancel',
                        preConfirm: () => {
                            const target = document.getElementById('transferTarget').value;
                            const reason = document.getElementById('transferReason').value;
                            
                            if (!target) {
                                Swal.showValidationMessage('Please select a transfer target');
                                return false;
                            }
                            
                            if (!reason) {
                                Swal.showValidationMessage('Please provide a transfer reason');
                                return false;
                            }
                            
                            return $.ajax({
                                url: '@Url.Action("Transfer", "Requests")',
                                type: 'POST',
                                data: {
                                    id: requestId,
                                    transferToUserId: target,
                                    reason: reason,
                                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            if (result.value && result.value.success) {
                                Swal.fire(
                                    'Transferred!',
                                    result.value.message,
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error!', result.value?.message || 'Failed to transfer request', 'error');
                            }
                        }
                    });
                })
                .catch(() => {
                    Swal.fire('Error!', 'Failed to load transfer targets', 'error');
                });
        }
    </script>
}

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 20px;
        }

        .timeline-marker {
            position: absolute;
            left: -23px;
            top: 5px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 3px solid #fff;
            box-shadow: 0 0 0 2px #dee2e6;
        }

        .timeline-content {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
            border-left: 3px solid #007bff;
        }

        .timeline-title {
            margin: 0 0 5px 0;
            font-size: 14px;
            font-weight: 600;
        }

        .timeline-date {
            margin: 0;
            font-size: 12px;
            color: #6c757d;
        }
    </style>
}
