@model HospitalAssetTracker.Models.InventoryDashboardData
@{
    ViewData["Title"] = "Advanced Inventory Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-header">
                <h1 class="page-title">
                    <i class="fas fa-warehouse text-primary me-2"></i>
                    Warehouse Management Dashboard
                </h1>
                <p class="text-muted">Monitor inventory levels, movements, and analytics with intelligent insights</p>
            </div>
        </div>
    </div>

    <!-- Quick Action Buttons -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-tools text-primary me-2"></i>
                        Warehouse Management Tools
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-lg-3 col-sm-6">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="performAbcAnalysis()">
                                <i class="fas fa-chart-bar me-2"></i>
                                <div>
                                    <strong>ABC Analysis</strong>
                                    <small class="d-block text-muted">Value-based classification</small>
                                </div>
                            </button>
                        </div>
                        <div class="col-lg-3 col-sm-6">
                            <button type="button" class="btn btn-outline-success w-100" onclick="executeSmartReplenishment()">
                                <i class="fas fa-refresh me-2"></i>
                                <div>
                                    <strong>Smart Replenishment</strong>
                                    <small class="d-block text-muted">Intelligent restocking</small>
                                </div>
                            </button>
                        </div>
                        <div class="col-lg-3 col-sm-6">
                            <button type="button" class="btn btn-outline-info w-100" onclick="optimizeWarehouseLayout()">
                                <i class="fas fa-cube me-2"></i>
                                <div>
                                    <strong>Space Optimization</strong>
                                    <small class="d-block text-muted">Layout improvement</small>
                                </div>
                            </button>
                        </div>
                        <div class="col-lg-3 col-sm-6">
                            <a href="@Url.Action("Alerts", "Inventory")" class="btn btn-outline-warning w-100">
                                <i class="fas fa-bell me-2"></i>
                                <div>
                                    <strong>View All Alerts</strong>
                                    <small class="d-block text-muted">Inventory status</small>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Metrics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.TotalItems</h4>
                            <p class="mb-0">Total Items</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-boxes fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.AvailableItems</h4>
                            <p class="mb-0">Available Items</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">@Model.LowStockItems</h4>
                            <p class="mb-0">Low Stock Alerts</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="mb-0">$@Model.TotalValue.ToString("N0")</h4>
                            <p class="mb-0">Total Value</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts and Tables Row -->
    <div class="row">
        <!-- Inventory by Category Chart -->
        <div class="col-lg-6 col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-pie me-2"></i>Inventory by Category
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="categoryChart" width="400" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Movements -->
        <div class="col-lg-6 col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-exchange-alt me-2"></i>Recent Movements
                    </h5>
                    <a asp-action="Index" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (Model.RecentMovements?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Type</th>
                                        <th>Quantity</th>
                                        <th>Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var movement in Model.RecentMovements.Take(5))
                                    {
                                        <tr>
                                            <td>@movement.InventoryItem?.Name</td>
                                            <td>
                                                <span class="badge bg-@(movement.MovementType == InventoryMovementType.In ? "success" : "danger")">
                                                    @movement.MovementType
                                                </span>
                                            </td>
                                            <td>@movement.Quantity</td>
                                            <td>@movement.MovementDate.ToString("MM/dd/yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent movements to display.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Low Stock Alerts -->
    @if (Model.LowStockAlerts?.Any() == true)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>Low Stock Alerts
                        </h5>
                        <a asp-action="Alerts" class="btn btn-sm btn-outline-warning">View All Alerts</a>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Item Name</th>
                                        <th>Category</th>
                                        <th>Current Stock</th>
                                        <th>Minimum Level</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var alert in Model.LowStockAlerts.Take(10))
                                    {
                                        <tr>
                                            <td>@alert.Name</td>
                                            <td>@alert.Category</td>
                                            <td>
                                                <span class="badge bg-danger">@alert.Quantity</span>
                                            </td>
                                            <td>@alert.MinimumLevel</td>
                                            <td>@alert.Status</td>
                                            <td>
                                                <a asp-action="Details" asp-route-id="@alert.Id" class="btn btn-sm btn-outline-info">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a asp-action="StockIn" asp-route-id="@alert.Id" class="btn btn-sm btn-outline-success">
                                                    <i class="fas fa-plus"></i> Stock In
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Category Chart
        const categoryData = @Html.Raw(Json.Serialize(Model.CategoryData ?? new Dictionary<string, int>()));
        const ctx = document.getElementById('categoryChart').getContext('2d');
        
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(categoryData),
                datasets: [{
                    data: Object.values(categoryData),
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF',
                        '#FF9F40',
                        '#FF6384',
                        '#C9CBCF'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Quick Action Functions
        function performAbcAnalysis() {
            if (confirm('This will perform ABC analysis on all inventory items. Continue?')) {
                showLoadingToast('Performing ABC Analysis...');
                
                fetch('@Url.Action("PerformAbcAnalysis", "Inventory")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ analysisMonths: 12 })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccessToast(data.message || 'ABC Analysis completed successfully');
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        showErrorToast(data.message || 'Error performing ABC analysis');
                    }
                })
                .catch(error => {
                    showErrorToast('Error performing ABC analysis');
                    console.error('Error:', error);
                });
            }
        }

        function executeSmartReplenishment() {
            if (confirm('This will analyze inventory levels and create procurement requests where needed. Continue?')) {
                showLoadingToast('Executing Smart Replenishment...');
                
                fetch('@Url.Action("ExecuteSmartReplenishment", "Inventory")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccessToast(data.message || 'Smart replenishment completed successfully');
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        showErrorToast(data.message || 'Error executing smart replenishment');
                    }
                })
                .catch(error => {
                    showErrorToast('Error executing smart replenishment');
                    console.error('Error:', error);
                });
            }
        }

        function optimizeWarehouseLayout() {
            // Get available locations for optimization
            const locationId = prompt('Enter Location ID for optimization (or leave blank for all locations):');
            const locId = locationId ? parseInt(locationId) : 1; // Default to location 1
            
            if (confirm('This will analyze and optimize warehouse space utilization. Continue?')) {
                showLoadingToast('Optimizing Warehouse Layout...');
                
                fetch('@Url.Action("OptimizeWarehouseLayout", "Inventory")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ locationId: locId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccessToast(data.message || 'Warehouse optimization completed successfully');
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        showErrorToast(data.message || 'Error optimizing warehouse layout');
                    }
                })
                .catch(error => {
                    showErrorToast('Error optimizing warehouse layout');
                    console.error('Error:', error);
                });
            }
        }

        // Helper function to get anti-forgery token
        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        // Toast notification functions
        function showLoadingToast(message) {
            const toast = `
                <div class="toast align-items-center text-white bg-info border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="fas fa-spinner fa-spin me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            showToast(toast);
        }

        function showSuccessToast(message) {
            const toast = `
                <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="fas fa-check-circle me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            showToast(toast);
        }

        function showErrorToast(message) {
            const toast = `
                <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="fas fa-exclamation-circle me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            showToast(toast);
        }

        function showToast(toastHtml) {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }
            
            // Add toast to container
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            // Show the toast
            const toastElement = toastContainer.lastElementChild;
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
            
            // Remove toast element after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }
    </script>
}
