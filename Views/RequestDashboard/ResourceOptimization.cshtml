@model ResourceOptimizationViewModel
@{
    ViewData["Title"] = "Resource Optimization";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-users-cog"></i>
                        Resource Optimization Analysis
                    </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.Optimization != null)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <div class="info-box">
                                    <span class="info-box-icon bg-primary"><i class="fas fa-users"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Current Team Size</span>
                                        <span class="info-box-number">@Model.Optimization.CurrentTeamSize</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <span class="info-box-icon bg-success"><i class="fas fa-user-plus"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Suggested Team Size</span>
                                        <span class="info-box-number">@Model.Optimization.SuggestedTeamSize</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <span class="info-box-icon bg-info"><i class="fas fa-percentage"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Current Utilization</span>
                                        <span class="info-box-number">@Model.Optimization.CurrentUtilizationRate.ToString("P1")</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="info-box">
                                    <span class="info-box-icon bg-warning"><i class="fas fa-target"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Target Utilization</span>
                                        <span class="info-box-number">@Model.Optimization.OptimalUtilizationRate.ToString("P1")</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-4">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h4>Workload Distribution</h4>
                                    </div>
                                    <div class="card-body">
                                        <canvas id="workloadChart" width="400" height="300"></canvas>
                                        
                                        @if (Model.Optimization.WorkloadDistribution?.Any() == true)
                                        {
                                            <div class="mt-3">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead>
                                                            <tr>
                                                                <th>Team Member</th>
                                                                <th>Active Requests</th>
                                                                <th>Utilization</th>
                                                                <th>Status</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var member in Model.Optimization.WorkloadDistribution)
                                                            {
                                                                var utilization = member.Value / (double)Model.Optimization.AverageWorkload;
                                                                var statusClass = utilization > 1.2 ? "danger" : utilization > 0.9 ? "warning" : "success";
                                                                var statusText = utilization > 1.2 ? "Overloaded" : utilization > 0.9 ? "High" : "Normal";
                                                                
                                                                <tr>
                                                                    <td>@member.Key</td>
                                                                    <td>@member.Value</td>
                                                                    <td>@utilization.ToString("P0")</td>
                                                                    <td><span class="badge badge-@statusClass">@statusText</span></td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h4>Capacity Planning</h4>
                                    </div>
                                    <div class="card-body">
                                        <canvas id="capacityChart" width="400" height="300"></canvas>
                                        
                                        <div class="mt-3">
                                            <h5>Capacity Metrics</h5>
                                            <ul class="list-unstyled">
                                                <li><strong>Average Workload:</strong> @Model.Optimization.AverageWorkload requests/person</li>
                                                <li><strong>Peak Capacity:</strong> @Model.Optimization.PeakCapacity requests</li>
                                                <li><strong>Available Capacity:</strong> @(Model.Optimization.PeakCapacity - Model.Optimization.CurrentWorkload) requests</li>
                                                <li><strong>Capacity Utilization:</strong> @((double)Model.Optimization.CurrentWorkload / Model.Optimization.PeakCapacity).ToString("P1")</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (Model.Optimization.Recommendations?.Any() == true)
                        {
                            <div class="row mt-4">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header">
                                            <h4>Optimization Recommendations</h4>
                                        </div>
                                        <div class="card-body">
                                            <div class="row">
                                                @foreach (var recommendation in Model.Optimization.Recommendations)
                                                {
                                                    <div class="col-md-6 mb-3">
                                                        <div class="alert alert-info">
                                                            <i class="fas fa-lightbulb"></i>
                                                            <strong>Recommendation:</strong><br>
                                                            @recommendation
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h4>Actions</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-primary" onclick="rebalanceWorkload()">
                                                <i class="fas fa-balance-scale"></i> Auto-Rebalance Workload
                                            </button>
                                            <button type="button" class="btn btn-success" onclick="optimizeAssignments()">
                                                <i class="fas fa-magic"></i> Optimize Assignments
                                            </button>
                                            <button type="button" class="btn btn-info" onclick="generateReport()">
                                                <i class="fas fa-file-alt"></i> Generate Report
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            No resource optimization data available. Please ensure there are active requests and team members.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        @if (Model.Optimization?.WorkloadDistribution?.Any() == true)
        {
            <text>
            // Workload Distribution Chart
            const workloadCtx = document.getElementById('workloadChart').getContext('2d');
            const workloadChart = new Chart(workloadCtx, {
                type: 'bar',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.Optimization.WorkloadDistribution.Keys.Select(k => $"'{k}'")))],
                    datasets: [{
                        label: 'Active Requests',
                        data: [@Html.Raw(string.Join(",", Model.Optimization.WorkloadDistribution.Values))],
                        backgroundColor: function(context) {
                            const value = context.parsed.y;
                            const average = @Model.Optimization.AverageWorkload;
                            if (value > average * 1.2) return 'rgba(220, 53, 69, 0.8)';   // Overloaded - Red
                            if (value > average * 0.9) return 'rgba(255, 193, 7, 0.8)';   // High - Yellow
                            return 'rgba(40, 167, 69, 0.8)';                              // Normal - Green
                        },
                        borderColor: function(context) {
                            const value = context.parsed.y;
                            const average = @Model.Optimization.AverageWorkload;
                            if (value > average * 1.2) return 'rgba(220, 53, 69, 1)';
                            if (value > average * 0.9) return 'rgba(255, 193, 7, 1)';
                            return 'rgba(40, 167, 69, 1)';
                        },
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Current Workload Distribution'
                        }
                    }
                }
            });

            // Capacity Chart
            const capacityCtx = document.getElementById('capacityChart').getContext('2d');
            const capacityChart = new Chart(capacityCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Used Capacity', 'Available Capacity'],
                    datasets: [{
                        data: [@Model.Optimization.CurrentWorkload, @(Model.Optimization.PeakCapacity - Model.Optimization.CurrentWorkload)],
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.8)',
                            'rgba(201, 203, 207, 0.8)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Capacity Utilization'
                        }
                    }
                }
            });
            </text>
        }
        
        function rebalanceWorkload() {
            if (confirm('This will automatically redistribute requests to balance workload. Continue?')) {
                // Call API to rebalance workload
                fetch('/RequestDashboard/AutoRebalanceWorkload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toastr.success('Workload rebalanced successfully');
                        location.reload();
                    } else {
                        toastr.error(data.message || 'Failed to rebalance workload');
                    }
                })
                .catch(error => {
                    toastr.error('An error occurred while rebalancing workload');
                });
            }
        }
        
        function optimizeAssignments() {
            if (confirm('This will optimize current request assignments based on skills and availability. Continue?')) {
                // Call API to optimize assignments
                fetch('/RequestDashboard/OptimizeAssignments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toastr.success('Assignments optimized successfully');
                        location.reload();
                    } else {
                        toastr.error(data.message || 'Failed to optimize assignments');
                    }
                })
                .catch(error => {
                    toastr.error('An error occurred while optimizing assignments');
                });
            }
        }
        
        function generateReport() {
            window.open('/RequestDashboard/ResourceOptimizationReport?format=html', '_blank');
        }
    </script>
}
