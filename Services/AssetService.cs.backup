using Microsoft.EntityFrameworkCore;
using HospitalAssetTracker.Data;
using HospitalAssetTracker.Models;

namespace HospitalAssetTracker.Services
{
    public class AssetService : IAssetService
    {
        private readonly ApplicationDbContext _context;
        private readonly IAuditService _auditService;
        private readonly IQRCodeService _qrCodeService;

        public AssetService(ApplicationDbContext context, IAuditService auditService, IQRCodeService qrCodeService)
        {
            _context = context;
            _auditService = auditService;
            _qrCodeService = qrCodeService;
        }

        public async Task<IEnumerable<Asset>> GetAllAssetsAsync()
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<Asset?> GetAssetByIdAsync(int id)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Include(a => a.Movements)
                    .ThenInclude(m => m.FromLocation)
                .Include(a => a.Movements)
                    .ThenInclude(m => m.ToLocation)
                .Include(a => a.MaintenanceRecords)
                .FirstOrDefaultAsync(a => a.Id == id);
        }

        public async Task<Asset?> GetAssetByTagAsync(string assetTag)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .FirstOrDefaultAsync(a => a.AssetTag == assetTag);
        }

        public async Task<IEnumerable<Asset>> SearchAssetsAsync(string searchTerm)
        {
            var query = _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .AsQueryable();

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                searchTerm = searchTerm.ToLower();
                query = query.Where(a => 
                    a.AssetTag.ToLower().Contains(searchTerm) ||
                    a.Brand.ToLower().Contains(searchTerm) ||
                    a.Model.ToLower().Contains(searchTerm) ||
                    a.SerialNumber.ToLower().Contains(searchTerm) ||
                    a.InternalSerialNumber.ToLower().Contains(searchTerm) ||
                    a.Description.ToLower().Contains(searchTerm) ||
                    (a.AssignedToUser != null && (a.AssignedToUser.FirstName + " " + a.AssignedToUser.LastName).ToLower().Contains(searchTerm)) ||
                    (a.Location != null && a.Location.FullLocation.ToLower().Contains(searchTerm)));
            }

            return await query.OrderBy(a => a.AssetTag).ToListAsync();
        }

        public async Task<IEnumerable<Asset>> GetAssetsByLocationAsync(int locationId)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Where(a => a.LocationId == locationId)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<IEnumerable<Asset>> GetAssetsByUserAsync(string userId)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Where(a => a.AssignedToUserId == userId)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<IEnumerable<Asset>> GetAssetsByStatusAsync(AssetStatus status)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Where(a => a.Status == status)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<IEnumerable<Asset>> GetAssetsByCategoryAsync(AssetCategory category)
        {
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Where(a => a.Category == category)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<Asset> CreateAssetAsync(Asset asset, string userId)
        {
            // Generate internal serial number if not provided
            if (string.IsNullOrEmpty(asset.InternalSerialNumber))
            {
                asset.InternalSerialNumber = await GenerateInternalSerialNumberAsync();
            }

            asset.CreatedDate = DateTime.UtcNow;
            asset.LastUpdated = DateTime.UtcNow;

            _context.Assets.Add(asset);
            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.Create,
                "Asset",
                asset.Id,
                userId,
                $"Created asset {asset.AssetTag}",
                null,
                asset
            );

            return asset;
        }

        public async Task<Asset> UpdateAssetAsync(Asset asset, string userId)
        {
            var existingAsset = await _context.Assets.FindAsync(asset.Id);
            if (existingAsset == null)
            {
                throw new ArgumentException("Asset not found");
            }

            // Store original values for audit
            var originalAsset = new Asset
            {
                Id = existingAsset.Id,
                AssetTag = existingAsset.AssetTag,
                Category = existingAsset.Category,
                Brand = existingAsset.Brand,
                Model = existingAsset.Model,
                Status = existingAsset.Status,
                LocationId = existingAsset.LocationId,
                AssignedToUserId = existingAsset.AssignedToUserId
            };

            // Update properties
            existingAsset.AssetTag = asset.AssetTag;
            existingAsset.Category = asset.Category;
            existingAsset.Brand = asset.Brand;
            existingAsset.Model = asset.Model;
            existingAsset.SerialNumber = asset.SerialNumber;
            existingAsset.Description = asset.Description;
            existingAsset.Status = asset.Status;
            existingAsset.LocationId = asset.LocationId;
            existingAsset.AssignedToUserId = asset.AssignedToUserId;
            existingAsset.ResponsiblePerson = asset.ResponsiblePerson;
            existingAsset.Department = asset.Department;
            existingAsset.InstallationDate = asset.InstallationDate;
            existingAsset.WarrantyExpiry = asset.WarrantyExpiry;
            existingAsset.Supplier = asset.Supplier;
            existingAsset.PurchasePrice = asset.PurchasePrice;
            existingAsset.Notes = asset.Notes;
            existingAsset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.Update,
                "Asset",
                asset.Id,
                userId,
                $"Updated asset {asset.AssetTag}",
                originalAsset,
                existingAsset
            );

            return existingAsset;
        }

        public async Task<bool> DeleteAssetAsync(int id, string userId)
        {
            var asset = await _context.Assets.FindAsync(id);
            if (asset == null)
            {
                return false;
            }

            _context.Assets.Remove(asset);
            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.Delete,
                "Asset",
                id,
                userId,
                $"Deleted asset {asset.AssetTag}",
                asset,
                null
            );

            return true;
        }

        public async Task<bool> MoveAssetAsync(int assetId, int? newLocationId, string? newUserId, string reason, string performedByUserId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var oldLocationId = asset.LocationId;
            var oldUserId = asset.AssignedToUserId;

            asset.LocationId = newLocationId;
            asset.AssignedToUserId = newUserId;
            asset.LastUpdated = DateTime.UtcNow;

            // Create movement record
            var movement = new AssetMovement
            {
                AssetId = assetId,
                FromLocationId = oldLocationId,
                ToLocationId = newLocationId,
                FromUserId = oldUserId,
                ToUserId = newUserId,
                MovementDate = DateTime.UtcNow,
                Reason = reason,
                PerformedByUserId = performedByUserId
            };

            _context.AssetMovements.Add(movement);
            await _context.SaveChangesAsync();

            return true;
        }

        public async Task<bool> ChangeAssetStatusAsync(int assetId, AssetStatus newStatus, string reason, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var oldStatus = asset.Status;
            asset.Status = newStatus;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.StatusChange,
                "Asset",
                assetId,
                userId,
                $"Changed status from {oldStatus} to {newStatus}. Reason: {reason}",
                null,
                null,
                assetId
            );

            return true;
        }

        public async Task<bool> AssignAssetAsync(int assetId, string userId, string assignedByUserId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            asset.AssignedToUserId = userId;
            asset.Status = AssetStatus.InUse;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.Assignment,
                "Asset",
                assetId,
                assignedByUserId,
                $"Assigned asset to user {userId}",
                null,
                null,
                assetId
            );

            return true;
        }

        public async Task<bool> UnassignAssetAsync(int assetId, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            asset.AssignedToUserId = null;
            asset.Status = AssetStatus.Available;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            // Create audit log
            await _auditService.LogAsync(
                AuditAction.Assignment,
                "Asset",
                assetId,
                userId,
                "Unassigned asset from user",
                null,
                null,
                assetId
            );

            return true;
        }

        public async Task<IEnumerable<AssetMovement>> GetAssetMovementHistoryAsync(int assetId)
        {
            return await _context.AssetMovements
                .Include(m => m.FromLocation)
                .Include(m => m.ToLocation)
                .Include(m => m.PerformedByUser)
                .Where(m => m.AssetId == assetId)
                .OrderByDescending(m => m.MovementDate)
                .ToListAsync();
        }

        public async Task<bool> IsAssetTagUniqueAsync(string assetTag, int? excludeId = null)
        {
            var query = _context.Assets.AsQueryable();
            
            if (excludeId.HasValue)
                query = query.Where(a => a.Id != excludeId.Value);

            return !await query.AnyAsync(a => a.AssetTag == assetTag);
        }

        public async Task<IEnumerable<Asset>> GetAssetsForMaintenanceAsync()
        {
            var thirtyDaysFromNow = DateTime.UtcNow.AddDays(30);
            
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Include(a => a.MaintenanceRecords)
                .Where(a => 
                    a.Status == AssetStatus.Maintenance ||
                    a.MaintenanceRecords.Any(m => 
                        m.NextMaintenanceDate.HasValue && 
                        m.NextMaintenanceDate.Value <= thirtyDaysFromNow))
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        public async Task<IEnumerable<Asset>> GetExpiredWarrantyAssetsAsync()
        {
            var today = DateTime.Today;
            
            return await _context.Assets
                .Include(a => a.Location)
                .Include(a => a.AssignedToUser)
                .Where(a => a.WarrantyExpiry.HasValue && a.WarrantyExpiry.Value <= today)
                .OrderBy(a => a.AssetTag)
                .ToListAsync();
        }

        // Extended functionality
        public async Task<Asset> CloneAssetAsync(int sourceAssetId, string userId)
        {
            var sourceAsset = await _context.Assets.FindAsync(sourceAssetId);
            if (sourceAsset == null)
            {
                throw new ArgumentException("Source asset not found");
            }

            var clonedAsset = new Asset
            {
                AssetTag = await GenerateUniqueAssetTagAsync(sourceAsset.AssetTag),
                Category = sourceAsset.Category,
                Brand = sourceAsset.Brand,
                Model = sourceAsset.Model,
                SerialNumber = "", // Clear serial number for clone
                InternalSerialNumber = await GenerateInternalSerialNumberAsync(),
                Description = sourceAsset.Description,
                Status = AssetStatus.Available,
                LocationId = sourceAsset.LocationId,
                ResponsiblePerson = sourceAsset.ResponsiblePerson,
                Department = sourceAsset.Department,
                Supplier = sourceAsset.Supplier,
                PurchasePrice = sourceAsset.PurchasePrice,
                CreatedDate = DateTime.UtcNow,
                LastUpdated = DateTime.UtcNow
            };

            _context.Assets.Add(clonedAsset);
            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                AuditAction.Create,
                "Asset",
                clonedAsset.Id,
                userId,
                $"Cloned from asset {sourceAsset.AssetTag}",
                null,
                clonedAsset
            );

            return clonedAsset;
        }

        public async Task<bool> BulkUpdateStatusAsync(List<int> assetIds, AssetStatus newStatus, string reason, string userId)
        {
            var assets = await _context.Assets.Where(a => assetIds.Contains(a.Id)).ToListAsync();
            
            foreach (var asset in assets)
            {
                asset.Status = newStatus;
                asset.LastUpdated = DateTime.UtcNow;
            }

            await _context.SaveChangesAsync();

            foreach (var asset in assets)
            {
                await _auditService.LogAsync(
                    "Asset",
                    asset.Id,
                    "BulkStatusUpdate",
                    userId,
                    $"Bulk updated status to {newStatus}. Reason: {reason}",
                    asset
                );
            }

            return true;
        }

        public async Task<bool> BulkUpdateLocationAsync(List<int> assetIds, int? newLocationId, string reason, string userId)
        {
            var assets = await _context.Assets.Where(a => assetIds.Contains(a.Id)).ToListAsync();
            
            foreach (var asset in assets)
            {
                asset.LocationId = newLocationId;
                asset.LastUpdated = DateTime.UtcNow;
            }

            await _context.SaveChangesAsync();

            foreach (var asset in assets)
            {
                await _auditService.LogAsync(
                    "Asset",
                    asset.Id,
                    "BulkLocationUpdate",
                    userId,
                    $"Bulk updated location. Reason: {reason}",
                    asset
                );
            }

            return true;
        }

        public async Task<bool> BulkAssignAsync(List<int> assetIds, string assignedToUserId, string assignedByUserId)
        {
            var assets = await _context.Assets.Where(a => assetIds.Contains(a.Id)).ToListAsync();
            
            foreach (var asset in assets)
            {
                asset.AssignedToUserId = assignedToUserId;
                asset.Status = AssetStatus.InUse;
                asset.LastUpdated = DateTime.UtcNow;
            }

            await _context.SaveChangesAsync();

            foreach (var asset in assets)
            {
                await _auditService.LogAsync(
                    "Asset",
                    asset.Id,
                    "BulkAssign",
                    assignedByUserId,
                    $"Bulk assigned to user {assignedToUserId}",
                    asset
                );
            }

            return true;
        }

        public async Task<bool> DecommissionAssetAsync(int assetId, string reason, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            asset.Status = AssetStatus.Decommissioned;
            asset.AssignedToUserId = null;
            asset.LocationId = null;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "Decommission",
                userId,
                $"Decommissioned asset. Reason: {reason}",
                asset
            );

            return true;
        }

        public async Task<bool> WriteOffAssetAsync(int assetId, string reason, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            asset.Status = AssetStatus.WriteOff;
            asset.AssignedToUserId = null;
            asset.LocationId = null;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "WriteOff",
                userId,
                $"Written off asset. Reason: {reason}",
                asset
            );

            return true;
        }

        public async Task<bool> AttachDocumentAsync(int assetId, string documentPath, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var documents = GetDocumentList(asset.DocumentPaths);
            documents.Add(documentPath);
            asset.DocumentPaths = System.Text.Json.JsonSerializer.Serialize(documents);
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "AttachDocument",
                userId,
                $"Attached document: {documentPath}",
                asset
            );

            return true;
        }

        public async Task<bool> AttachImageAsync(int assetId, string imagePath, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var images = GetImageList(asset.ImagePaths);
            images.Add(imagePath);
            asset.ImagePaths = System.Text.Json.JsonSerializer.Serialize(images);
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "AttachImage",
                userId,
                $"Attached image: {imagePath}",
                asset
            );

            return true;
        }

        public async Task<bool> RemoveDocumentAsync(int assetId, string documentPath, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var documents = GetDocumentList(asset.DocumentPaths);
            documents.Remove(documentPath);
            asset.DocumentPaths = System.Text.Json.JsonSerializer.Serialize(documents);
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "RemoveDocument",
                userId,
                $"Removed document: {documentPath}",
                asset
            );

            return true;
        }

        public async Task<bool> RemoveImageAsync(int assetId, string imagePath, string userId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var images = GetImageList(asset.ImagePaths);
            images.Remove(imagePath);
            asset.ImagePaths = System.Text.Json.JsonSerializer.Serialize(images);
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            await _auditService.LogAsync(
                "Asset",
                assetId,
                "RemoveImage",
                userId,
                $"Removed image: {imagePath}",
                asset
            );

            return true;
        }

        public async Task<List<string>> GetAssetDocumentsAsync(int assetId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            return asset != null ? GetDocumentList(asset.DocumentPaths) : new List<string>();
        }

        public async Task<List<string>> GetAssetImagesAsync(int assetId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            return asset != null ? GetImageList(asset.ImagePaths) : new List<string>();
        }

        public async Task<bool> GenerateAssetQRCodeAsync(int assetId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null)
            {
                return false;
            }

            var qrCodeData = _qrCodeService.GenerateQRCode(asset.AssetTag);
            asset.QRCodeData = qrCodeData;
            asset.LastUpdated = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<byte[]> GetAssetQRCodeAsync(int assetId)
        {
            var asset = await _context.Assets.FindAsync(assetId);
            if (asset == null || string.IsNullOrEmpty(asset.QRCodeData))
            {
                return Array.Empty<byte>();
            }

            return Convert.FromBase64String(asset.QRCodeData);
        }

        public async Task<IEnumerable<Location>> GetActiveLocationsAsync()
        {
            return await _context.Locations
                .Where(l => l.IsActive)
                .OrderBy(l => l.Building)
                .ThenBy(l => l.Floor)
                .ThenBy(l => l.Room)
                .ToListAsync();
        }

        public async Task<IEnumerable<ApplicationUser>> GetActiveUsersAsync()
        {
            return await _context.Users
                .Where(u => u.IsActive)
                .OrderBy(u => u.LastName)
                .ThenBy(u => u.FirstName)
                .ToListAsync();
        }

        // Private helper methods
        private async Task<string> GenerateInternalSerialNumberAsync()
        {
            var prefix = "HSP";
            var year = DateTime.UtcNow.Year.ToString();
            var counter = await _context.Assets.CountAsync() + 1;
            var serial = $"{prefix}{year}{counter:D6}";
            
            // Ensure uniqueness
            bool isUnique;
            do
            {
                counter++;
                serial = $"{prefix}{year}{counter:D6}";
                
                isUnique = !await _context.Assets.AnyAsync(a => a.InternalSerialNumber == serial);
            } while (!isUnique);

            return serial;
        }

        private async Task<string> GenerateUniqueAssetTagAsync(string baseTag)
        {
            var baseName = baseTag.Split('-')[0];
            var counter = 1;
            string newTag;

            do
            {
                newTag = $"{baseName}-{counter:D3}";
                counter++;
            } while (!await IsAssetTagUniqueAsync(newTag));

            return newTag;
        }

        private List<string> GetDocumentList(string? jsonDocuments)
        {
            if (string.IsNullOrEmpty(jsonDocuments))
                return new List<string>();

            try
            {
                return System.Text.Json.JsonSerializer.Deserialize<List<string>>(jsonDocuments) ?? new List<string>();
            }
            catch
            {
                return new List<string>();
            }
        }

        private List<string> GetImageList(string? jsonImages)
        {
            if (string.IsNullOrEmpty(jsonImages))
                return new List<string>();

            try
            {
                return System.Text.Json.JsonSerializer.Deserialize<List<string>>(jsonImages) ?? new List<string>();
            }
            catch
            {
                return new List<string>();
            }
        }
    }
}
