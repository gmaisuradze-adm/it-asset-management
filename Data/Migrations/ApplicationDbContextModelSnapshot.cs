// <auto-generated />
using System;
using HospitalAssetTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HospitalAssetTracker.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HospitalAssetTracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DocumentPaths")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ImagePaths")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("InstallationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("InternalSerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QRCodeData")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetTag")
                        .IsUnique();

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AssetInventoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeployedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("DeploymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeploymentReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MappingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReturnedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeployedByUserId");

                    b.HasIndex("DeploymentDate");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("ReturnedByUserId");

                    b.HasIndex("AssetId", "InventoryItemId", "Status");

                    b.ToTable("AssetInventoryMappings");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AssetMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("MovementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("MovementType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("ToUserId");

                    b.ToTable("AssetMovements");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AutomationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AutomationRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExecutedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ExecutionDetailsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RuleId")
                        .HasColumnType("integer");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedByUserId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("RuleId", "Action");

                    b.ToTable("AutomationLogs");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AutomationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("integer");

                    b.Property<bool>("HasExecutionErrors")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastExecutedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastExecutionError")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TriggerCount")
                        .HasColumnType("integer");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RuleName")
                        .IsUnique();

                    b.ToTable("AutomationRules");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.BudgetCategoryAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualSpend")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AllocatedBudget")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RemainingBudget")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SpendRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Spent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("BudgetCategoryAnalyses");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.BudgetDepartmentAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualSpend")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AllocatedBudget")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RemainingBudget")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SpendRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Spent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("BudgetDepartmentAnalyses");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.BugFixHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BugTrackingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FixDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FixDescription")
                        .HasColumnType("text");

                    b.Property<string>("FixedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BugFixHistories");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.BugTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BugTrackings");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.CategoryForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<double>("Confidence")
                        .HasColumnType("double precision");

                    b.Property<decimal>("ForecastAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ForecastedValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PredictedSpend")
                        .HasColumnType("numeric");

                    b.Property<string>("TrendDirection")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryForecasts");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.EventSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Filters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationConfig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("EventSubscriptions");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ITRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AssignmentNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("BusinessJustification")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CompletedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompletionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DamagedAssetId")
                        .HasColumnType("integer");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DisposalNotesForUnmanagedAsset")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Justification")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("ProvidedInventoryItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("RelatedAssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("RequestedItemCategory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RequestedItemSpecifications")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RequiredInventoryItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResolutionDetails")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("DamagedAssetId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProvidedInventoryItemId");

                    b.HasIndex("RelatedAssetId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("RequestNumber")
                        .IsUnique();

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("RequiredInventoryItemId");

                    b.HasIndex("Department", "RequestDate");

                    b.HasIndex("RequestType", "Status");

                    b.ToTable("ITRequests");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbcClassification")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BinLocation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CalibrationCertificate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CompatibleWith")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastCalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumStock")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextCalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresCalibration")
                        .HasColumnType("boolean");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Specifications")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StorageBin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StorageShelf")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StorageZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierPartNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TotalValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WarrantyPeriodMonths")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartNumber");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("Brand", "Model");

                    b.HasIndex("Category", "Status");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FromBin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("FromShelf")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FromZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MovementType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RelatedAssetId")
                        .HasColumnType("integer");

                    b.Property<string>("ToBin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("ToShelf")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ToZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("MovementDate");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("RelatedAssetId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("InventoryItemId", "MovementDate");

                    b.ToTable("InventoryMovements");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryNote")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("QualityCheckDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("QualityChecked")
                        .HasColumnType("boolean");

                    b.Property<string>("QualityCheckedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("QualityNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("RelatedAssetId")
                        .HasColumnType("integer");

                    b.Property<int?>("RelatedInventoryMovementId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ShippingCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("TaxAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("PurchaseOrderNumber");

                    b.HasIndex("QualityCheckedByUserId");

                    b.HasIndex("RelatedAssetId");

                    b.HasIndex("RelatedInventoryMovementId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("InventoryItemId", "TransactionDate");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Floor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Building", "Floor", "Room")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.MaintenanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PartsUsed")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WorkPerformed")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ActivityDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer");

                    b.Property<int?>("FromStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ProcurementRequestId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionByUserId");

                    b.HasIndex("ProcurementRequestId", "ActionDate");

                    b.ToTable("ProcurementActivities");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcurementRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ProcurementRequestId", "Sequence");

                    b.ToTable("ProcurementApprovals");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcurementRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("UploadedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("UploadedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementRequestId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("ProcurementDocuments");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualUnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("EstimatedUnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ExpectedInventoryItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcurementRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceivedInventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("TechnicalSpecifications")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExpectedInventoryItemId");

                    b.HasIndex("ProcurementRequestId");

                    b.HasIndex("ReceivedInventoryItemId");

                    b.ToTable("ProcurementItems");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ApprovedBudget")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<bool>("AssetRegistered")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedToProcurementOfficerId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("BudgetCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BusinessJustification")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("CurrentApprovalLevel")
                        .HasColumnType("integer");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal>("EstimatedBudget")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalCost")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("FiscalYear")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("InventoryUpdated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginatingRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("ProcurementNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ProcurementNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ProcurementStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProcurementType")
                        .HasColumnType("integer");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("QualityApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("QualityApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("QualityApprovedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ReceivedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReplacementForAssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequestFulfilled")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SelectedVendorId")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("SpecificationNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SupportDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TriggeredByInventoryItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WarrantyReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("AssignedToProcurementOfficerId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("OriginatingRequestId");

                    b.HasIndex("ProcurementNumber")
                        .IsUnique();

                    b.HasIndex("QualityApprovedByUserId");

                    b.HasIndex("ReceivedByUserId");

                    b.HasIndex("ReplacementForAssetId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("SelectedVendorId");

                    b.HasIndex("Source");

                    b.HasIndex("TriggeredByInventoryItemId");

                    b.HasIndex("Department", "RequestDate");

                    b.HasIndex("ProcurementType", "Status");

                    b.ToTable("ProcurementRequests");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.QualityAssessmentRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("ChecklistJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("InspectorId")
                        .HasColumnType("text");

                    b.Property<string>("InspectorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OverallCondition")
                        .HasColumnType("integer");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("QualityScore")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentDate");

                    b.HasIndex("InspectorId");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("AssetId", "AssessmentDate");

                    b.ToTable("QualityAssessmentRecords");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.QuoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProcurementItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Specifications")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VendorQuoteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementItemId");

                    b.HasIndex("VendorQuoteId");

                    b.ToTable("QuoteItems");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestActions");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ITRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ITRequestId", "ActivityDate");

                    b.ToTable("RequestActivities");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ITRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ITRequestId", "Sequence");

                    b.ToTable("RequestApprovals");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("ITRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("UploadedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("UploadedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ITRequestId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("RequestAttachments");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("CommentType")
                        .HasColumnType("integer");

                    b.Property<string>("CommentedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("ITRequestId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("ITRequestId", "CreatedDate");

                    b.ToTable("RequestComments");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestEscalation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoEscalated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EscalatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EscalatedTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EscalationLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestEscalations");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DefaultPriority")
                        .HasColumnType("integer");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ItemCategory")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RequestTemplates");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.SpendAnomaly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("AnomalyType")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Severity")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SpendAnomalies");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.SpendTrend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Period")
                        .HasColumnType("text");

                    b.Property<int>("RequestCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SpendTrends");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.SystemVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemVersions");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("ComplianceRating")
                        .HasColumnType("numeric");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("DeliveryRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("FinancialStability")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("OnTimeDeliveries")
                        .HasColumnType("integer");

                    b.Property<decimal>("PerformanceRating")
                        .HasColumnType("numeric");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("QualityIssues")
                        .HasColumnType("integer");

                    b.Property<decimal>("QualityRating")
                        .HasColumnType("numeric");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ReliabilityRating")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TaxNumber");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.VendorQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DeliveryDays")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProcurementRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuoteNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("ValidUntilDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.Property<string>("WarrantyTerms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("QuoteDate");

                    b.HasIndex("VendorId");

                    b.HasIndex("ProcurementRequestId", "VendorId");

                    b.ToTable("VendorQuotes");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingResult")
                        .HasColumnType("text");

                    b.Property<string>("StepName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowEvents");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompensationData")
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("InitiatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("integer");

                    b.Property<string>("WorkflowType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InitiatedByUserId");

                    b.ToTable("WorkflowInstances");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowStepInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompensationAction")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExecutedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .HasColumnType("text");

                    b.Property<string>("Output")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedByUserId");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowStepInstances");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WriteOffRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("CertificateOfDestruction")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisposalMethod")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DisposalVendor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("EstimatedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProcessedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReviewedByUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("SalvageValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("WriteOffNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("AssetId");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.ToTable("WriteOffRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Asset", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "AssignedToUser")
                        .WithMany("AssignedAssets")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Location", "Location")
                        .WithMany("Assets")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedToUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AssetInventoryMapping", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "DeployedByUser")
                        .WithMany()
                        .HasForeignKey("DeployedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "InventoryItem")
                        .WithMany("AssetMappings")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ReturnedByUser")
                        .WithMany()
                        .HasForeignKey("ReturnedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Asset");

                    b.Navigation("DeployedByUser");

                    b.Navigation("InventoryItem");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("ReturnedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AssetMovement", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany("Movements")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "PerformedByUser")
                        .WithMany("AssetMovements")
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.Location", "ToLocation")
                        .WithMany("AssetMovements")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Asset");

                    b.Navigation("FromLocation");

                    b.Navigation("FromUser");

                    b.Navigation("PerformedByUser");

                    b.Navigation("ToLocation");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AuditLog", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AutomationLog", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ExecutedByUser")
                        .WithMany()
                        .HasForeignKey("ExecutedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.AutomationRule", "Rule")
                        .WithMany("Logs")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutedByUser");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AutomationRule", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.EventSubscription", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ITRequest", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Asset", "DamagedAsset")
                        .WithMany()
                        .HasForeignKey("DamagedAssetId");

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "ProvidedInventoryItem")
                        .WithMany()
                        .HasForeignKey("ProvidedInventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Asset", "RelatedAsset")
                        .WithMany()
                        .HasForeignKey("RelatedAssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "RequiredInventoryItem")
                        .WithMany()
                        .HasForeignKey("RequiredInventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedToUser");

                    b.Navigation("CompletedByUser");

                    b.Navigation("DamagedAsset");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Location");

                    b.Navigation("ProvidedInventoryItem");

                    b.Navigation("RelatedAsset");

                    b.Navigation("RequestedByUser");

                    b.Navigation("RequiredInventoryItem");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryItem", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryMovement", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "InventoryItem")
                        .WithMany("Movements")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.Asset", "RelatedAsset")
                        .WithMany()
                        .HasForeignKey("RelatedAssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("FromLocation");

                    b.Navigation("InventoryItem");

                    b.Navigation("PerformedByUser");

                    b.Navigation("RelatedAsset");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryTransaction", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "InventoryItem")
                        .WithMany("Transactions")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "QualityCheckedByUser")
                        .WithMany()
                        .HasForeignKey("QualityCheckedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.Asset", "RelatedAsset")
                        .WithMany()
                        .HasForeignKey("RelatedAssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.InventoryMovement", "RelatedInventoryMovement")
                        .WithMany()
                        .HasForeignKey("RelatedInventoryMovementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("InventoryItem");

                    b.Navigation("QualityCheckedByUser");

                    b.Navigation("RelatedAsset");

                    b.Navigation("RelatedInventoryMovement");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Notification", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementActivity", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ActionByUser")
                        .WithMany()
                        .HasForeignKey("ActionByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ProcurementRequest", "ProcurementRequest")
                        .WithMany("Activities")
                        .HasForeignKey("ProcurementRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionByUser");

                    b.Navigation("ProcurementRequest");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementApproval", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ProcurementRequest", "ProcurementRequest")
                        .WithMany("Approvals")
                        .HasForeignKey("ProcurementRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Approver");

                    b.Navigation("ProcurementRequest");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementDocument", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ProcurementRequest", "ProcurementRequest")
                        .WithMany("Documents")
                        .HasForeignKey("ProcurementRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcurementRequest");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementItem", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "ExpectedInventoryItem")
                        .WithMany()
                        .HasForeignKey("ExpectedInventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ProcurementRequest", "ProcurementRequest")
                        .WithMany("Items")
                        .HasForeignKey("ProcurementRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "ReceivedInventoryItem")
                        .WithMany()
                        .HasForeignKey("ReceivedInventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpectedInventoryItem");

                    b.Navigation("ProcurementRequest");

                    b.Navigation("ReceivedInventoryItem");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementRequest", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "AssignedToProcurementOfficer")
                        .WithMany()
                        .HasForeignKey("AssignedToProcurementOfficerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "OriginatingRequest")
                        .WithMany("ProcurementRequests")
                        .HasForeignKey("OriginatingRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "QualityApprovedByUser")
                        .WithMany()
                        .HasForeignKey("QualityApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.Asset", "ReplacementForAsset")
                        .WithMany()
                        .HasForeignKey("ReplacementForAssetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.Vendor", "SelectedVendor")
                        .WithMany("ProcurementRequests")
                        .HasForeignKey("SelectedVendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "TriggeredByInventoryItem")
                        .WithMany()
                        .HasForeignKey("TriggeredByInventoryItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("AssignedToProcurementOfficer");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("OriginatingRequest");

                    b.Navigation("QualityApprovedByUser");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("ReplacementForAsset");

                    b.Navigation("RequestedByUser");

                    b.Navigation("SelectedVendor");

                    b.Navigation("TriggeredByInventoryItem");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.QualityAssessmentRecord", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany("QualityAssessments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("HospitalAssetTracker.Models.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Inspector");

                    b.Navigation("InventoryItem");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.QuoteItem", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ProcurementItem", "ProcurementItem")
                        .WithMany()
                        .HasForeignKey("ProcurementItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.VendorQuote", "VendorQuote")
                        .WithMany("Items")
                        .HasForeignKey("VendorQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcurementItem");

                    b.Navigation("VendorQuote");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestAction", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestActivity", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "ITRequest")
                        .WithMany("Activities")
                        .HasForeignKey("ITRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ITRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestApproval", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "ITRequest")
                        .WithMany()
                        .HasForeignKey("ITRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("ITRequest");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestAttachment", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "ITRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("ITRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ITRequest");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestComment", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "ITRequest")
                        .WithMany("Comments")
                        .HasForeignKey("ITRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedByUser");

                    b.Navigation("ITRequest");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.RequestEscalation", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ITRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.VendorQuote", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ProcurementRequest", "ProcurementRequest")
                        .WithMany("Quotes")
                        .HasForeignKey("ProcurementRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.Vendor", "Vendor")
                        .WithMany("Quotes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcurementRequest");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowEvent", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.WorkflowInstance", "Workflow")
                        .WithMany("WorkflowEvents")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowInstance", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "InitiatedByUser")
                        .WithMany()
                        .HasForeignKey("InitiatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitiatedByUser");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowStepInstance", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ExecutedByUser")
                        .WithMany()
                        .HasForeignKey("ExecutedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutedByUser");

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WriteOffRecord", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HospitalAssetTracker.Models.Asset", "Asset")
                        .WithMany("WriteOffRecords")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId");

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Asset");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalAssetTracker.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ApplicationUser", b =>
                {
                    b.Navigation("AssetMovements");

                    b.Navigation("AssignedAssets");

                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Asset", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Movements");

                    b.Navigation("QualityAssessments");

                    b.Navigation("WriteOffRecords");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.AutomationRule", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ITRequest", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("ProcurementRequests");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.InventoryItem", b =>
                {
                    b.Navigation("AssetMappings");

                    b.Navigation("Movements");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Location", b =>
                {
                    b.Navigation("AssetMovements");

                    b.Navigation("Assets");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.ProcurementRequest", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Approvals");

                    b.Navigation("Documents");

                    b.Navigation("Items");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.Vendor", b =>
                {
                    b.Navigation("ProcurementRequests");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.VendorQuote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HospitalAssetTracker.Models.WorkflowInstance", b =>
                {
                    b.Navigation("WorkflowEvents");

                    b.Navigation("WorkflowSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
